
cv08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e58  08003e58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000cc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9c  00000000  00000000  0002f466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024515  00000000  00000000  00032a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d898  00000000  00000000  00056f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db8ad  00000000  00000000  000647ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014005a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  001400b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d18 	.word	0x08003d18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003d18 	.word	0x08003d18

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffd1 	bl	8000588 <ITM_SendChar>
	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 { 1, 2, 3, 21 },
 { 4, 5, 6, 22 },
 { 7, 8, 9, 23 },
 { 11, 0, 12, 24 },
 };
 if (key == -1) {
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000602:	d142      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x9a>
	 if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET)
 8000604:	2108      	movs	r1, #8
 8000606:	4849      	ldr	r0, [pc, #292]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000608:	f001 f830 	bl	800166c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d108      	bne.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x34>
		 key = keyboard[row][0];
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a47      	ldr	r2, [pc, #284]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	4413      	add	r3, r2
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b25a      	sxtb	r2, r3
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000622:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET)
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4841      	ldr	r0, [pc, #260]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000628:	f001 f820 	bl	800166c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d109      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x56>
		 key = keyboard[row][1];
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3f      	ldr	r2, [pc, #252]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4413      	add	r3, r2
 800063c:	3304      	adds	r3, #4
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	b25a      	sxtb	r2, r3
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000644:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET)
 8000646:	2120      	movs	r1, #32
 8000648:	4838      	ldr	r0, [pc, #224]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800064a:	f001 f80f 	bl	800166c <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d109      	bne.n	8000668 <HAL_TIM_PeriodElapsedCallback+0x78>
	 	 key = keyboard[row][2];
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a36      	ldr	r2, [pc, #216]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	4413      	add	r3, r2
 800065e:	3308      	adds	r3, #8
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b25a      	sxtb	r2, r3
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000666:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET)
 8000668:	2110      	movs	r1, #16
 800066a:	4830      	ldr	r0, [pc, #192]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800066c:	f000 fffe 	bl	800166c <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d109      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x9a>
	 	 key = keyboard[row][3];
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	330c      	adds	r3, #12
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	b25a      	sxtb	r2, r3
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000688:	701a      	strb	r2, [r3, #0]

 }
 	 HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000690:	f001 f804 	bl	800169c <HAL_GPIO_WritePin>
 	 HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4828      	ldr	r0, [pc, #160]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800069c:	f000 fffe 	bl	800169c <HAL_GPIO_WritePin>
 	 HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4825      	ldr	r0, [pc, #148]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006a6:	f000 fff9 	bl	800169c <HAL_GPIO_WritePin>
 	 HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4822      	ldr	r0, [pc, #136]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006b2:	f000 fff3 	bl	800169c <HAL_GPIO_WritePin>
 	 switch (row) {
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d830      	bhi.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006e9 	.word	0x080006e9
 80006cc:	080006fb 	.word	0x080006fb
 80006d0:	0800070f 	.word	0x0800070f
 	 	 case 0: row = 1;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
 	 	 	 HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	4816      	ldr	r0, [pc, #88]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006e2:	f000 ffdb 	bl	800169c <HAL_GPIO_WritePin>
 	 	 	 break;
 80006e6:	e01b      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
 	 	 case 1: row = 2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	601a      	str	r2, [r3, #0]
 	 	 	 HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006f4:	f000 ffd2 	bl	800169c <HAL_GPIO_WritePin>
 	 	 	 break;
 80006f8:	e012      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
 	 	 case 2: row = 3;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	601a      	str	r2, [r3, #0]
 	 	 	 HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000708:	f000 ffc8 	bl	800169c <HAL_GPIO_WritePin>
 	 	 	 break;
 800070c:	e008      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
 	 	 case 3: row = 0;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 	 	 	 HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2102      	movs	r1, #2
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800071a:	f000 ffbf 	bl	800169c <HAL_GPIO_WritePin>
 	 	 	 break;
 800071e:	bf00      	nop
 }
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	40021000 	.word	0x40021000
 8000730:	20000090 	.word	0x20000090
 8000734:	08003d60 	.word	0x08003d60
 8000738:	40021800 	.word	0x40021800
 800073c:	40021400 	.word	0x40021400

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fc61 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f86d 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f94d 	bl	80009ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000752:	f000 f921 	bl	8000998 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000756:	f000 f8d1 	bl	80008fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <main+0xcc>)
 800075c:	f001 fc96 	bl	800208c <HAL_TIM_Base_Start_IT>
  printf("test\n");
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <main+0xd0>)
 8000762:	f002 fb93 	bl	8002e8c <puts>

  /* USER CODE END 2 */

  const int8_t password[] = {7, 9, 3, 2, 12};
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <main+0xd4>)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076e:	6018      	str	r0, [r3, #0]
 8000770:	3304      	adds	r3, #4
 8000772:	7019      	strb	r1, [r3, #0]
  uint32_t Tim = HAL_GetTick();
 8000774:	f000 fcb0 	bl	80010d8 <HAL_GetTick>
 8000778:	60f8      	str	r0, [r7, #12]
  uint8_t press = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	72fb      	strb	r3, [r7, #11]
  uint8_t pos = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	72bb      	strb	r3, [r7, #10]
/*	  if(key != -1) {
		  printf("stlacene: %d\n", key);
		  key = -1;
*/

	  if((HAL_GetTick() > Tim + TIMEOUT) && press)
 8000782:	f000 fca9 	bl	80010d8 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800078e:	429a      	cmp	r2, r3
 8000790:	d909      	bls.n	80007a6 <main+0x66>
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <main+0x66>
	  {
		  printf("Timeout\n");
 8000798:	481f      	ldr	r0, [pc, #124]	; (8000818 <main+0xd8>)
 800079a:	f002 fb77 	bl	8002e8c <puts>
		  press = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	72fb      	strb	r3, [r7, #11]
		  pos = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	72bb      	strb	r3, [r7, #10]
	  }

	  if(key != -1)
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <main+0xdc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b0:	d0e7      	beq.n	8000782 <main+0x42>
	  {
		  if (key == password[pos])
 80007b2:	7abb      	ldrb	r3, [r7, #10]
 80007b4:	f107 0210 	add.w	r2, r7, #16
 80007b8:	4413      	add	r3, r2
 80007ba:	f913 2c0c 	ldrsb.w	r2, [r3, #-12]
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <main+0xdc>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d10e      	bne.n	80007e6 <main+0xa6>
		  {
			  if (pos == 4)
 80007c8:	7abb      	ldrb	r3, [r7, #10]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d102      	bne.n	80007d4 <main+0x94>
			  {
				  pos = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	72bb      	strb	r3, [r7, #10]
 80007d2:	e00a      	b.n	80007ea <main+0xaa>
			  }
			  else
			  {
				  pos++;
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	3301      	adds	r3, #1
 80007d8:	72bb      	strb	r3, [r7, #10]
				  Tim = HAL_GetTick();
 80007da:	f000 fc7d 	bl	80010d8 <HAL_GetTick>
 80007de:	60f8      	str	r0, [r7, #12]
				  press = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	72fb      	strb	r3, [r7, #11]
 80007e4:	e001      	b.n	80007ea <main+0xaa>
		  }
	  }
			  else
				  pos = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	72bb      	strb	r3, [r7, #10]
			  printf("Press = %d > pos = %d\n", key, pos);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <main+0xdc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	7abb      	ldrb	r3, [r7, #10]
 80007f4:	461a      	mov	r2, r3
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <main+0xe0>)
 80007f8:	f002 fac2 	bl	8002d80 <iprintf>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <main+0xe4>)
 8000800:	f000 ff65 	bl	80016ce <HAL_GPIO_TogglePin>
			  key = -1;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <main+0xdc>)
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	701a      	strb	r2, [r3, #0]
	  if((HAL_GetTick() > Tim + TIMEOUT) && press)
 800080a:	e7ba      	b.n	8000782 <main+0x42>
 800080c:	200000e4 	.word	0x200000e4
 8000810:	08003d30 	.word	0x08003d30
 8000814:	08003d58 	.word	0x08003d58
 8000818:	08003d38 	.word	0x08003d38
 800081c:	20000000 	.word	0x20000000
 8000820:	08003d40 	.word	0x08003d40
 8000824:	40020400 	.word	0x40020400

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fa9a 	bl	8002d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000888:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800089c:	23a8      	movs	r3, #168	; 0xa8
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a4:	2307      	movs	r3, #7
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 ff29 	bl	8001704 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 f9f6 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2105      	movs	r1, #5
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f98a 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e6:	f000 f9df 	bl	8000ca8 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_TIM3_Init+0x94>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_TIM3_Init+0x98>)
 800091c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_TIM3_Init+0x94>)
 8000920:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_TIM3_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_TIM3_Init+0x94>)
 800092e:	2263      	movs	r2, #99	; 0x63
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM3_Init+0x94>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	; (8000990 <MX_TIM3_Init+0x94>)
 8000940:	f001 fb54 	bl	8001fec <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f9ad 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_TIM3_Init+0x94>)
 800095c:	f001 fd0e 	bl	800237c <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f99f 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM3_Init+0x94>)
 8000978:	f001 ff2a 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 f991 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000e4 	.word	0x200000e4
 8000994:	40000400 	.word	0x40000400

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART3_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009d0:	f001 ff8e 	bl	80028f0 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f965 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
 8000a06:	4ba1      	ldr	r3, [pc, #644]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4aa0      	ldr	r2, [pc, #640]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b9e      	ldr	r3, [pc, #632]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	623b      	str	r3, [r7, #32]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	4b9a      	ldr	r3, [pc, #616]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a99      	ldr	r2, [pc, #612]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b97      	ldr	r3, [pc, #604]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	4b93      	ldr	r3, [pc, #588]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b90      	ldr	r3, [pc, #576]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	4b8c      	ldr	r3, [pc, #560]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a8b      	ldr	r2, [pc, #556]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b89      	ldr	r3, [pc, #548]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b85      	ldr	r3, [pc, #532]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a84      	ldr	r2, [pc, #528]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b82      	ldr	r3, [pc, #520]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b7e      	ldr	r3, [pc, #504]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a7d      	ldr	r2, [pc, #500]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b77      	ldr	r3, [pc, #476]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a76      	ldr	r2, [pc, #472]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b70      	ldr	r3, [pc, #448]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a6f      	ldr	r2, [pc, #444]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <MX_GPIO_Init+0x2a0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ae8:	4869      	ldr	r0, [pc, #420]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000aea:	f000 fdd7 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af4:	4867      	ldr	r0, [pc, #412]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000af6:	f000 fdd1 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2142      	movs	r1, #66	; 0x42
 8000afe:	4866      	ldr	r0, [pc, #408]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000b00:	f000 fdcc 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000b04:	2378      	movs	r3, #120	; 0x78
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4861      	ldr	r0, [pc, #388]	; (8000c9c <MX_GPIO_Init+0x2b0>)
 8000b18:	f000 fbfc 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	485b      	ldr	r0, [pc, #364]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000b34:	f000 fbee 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000b38:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b3e:	2311      	movs	r3, #17
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	484f      	ldr	r0, [pc, #316]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000b52:	f000 fbdf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b56:	2332      	movs	r3, #50	; 0x32
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b66:	230b      	movs	r3, #11
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	484b      	ldr	r0, [pc, #300]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000b72:	f000 fbcf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b76:	2386      	movs	r3, #134	; 0x86
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4844      	ldr	r0, [pc, #272]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000b92:	f000 fbbf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4839      	ldr	r0, [pc, #228]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000bb0:	f000 fbb0 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4833      	ldr	r0, [pc, #204]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000bcc:	f000 fba2 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4829      	ldr	r0, [pc, #164]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000bee:	f000 fb91 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000c0a:	f000 fb83 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000c22:	f000 fb77 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c26:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000c44:	f000 fb66 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000c5e:	f000 fb59 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000c80:	f000 fb48 	bl	8001314 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021400 	.word	0x40021400
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d115      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_TIM_Base_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_Base_MspInit+0x4c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_Base_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	201d      	movs	r0, #29
 8000d38:	f000 fab5 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	f000 face 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000dcc:	f000 faa2 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020c00 	.word	0x40020c00

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f93e 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM3_IRQHandler+0x10>)
 8000e3e:	f001 f995 	bl	800216c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000e4 	.word	0x200000e4

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fb98 	bl	80005d6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f001 fee0 	bl	8002d1c <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20030000 	.word	0x20030000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000094 	.word	0x20000094
 8000f90:	20000140 	.word	0x20000140

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f001 fe9f 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fba9 	bl	8000740 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ffc:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8001000:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001004:	20000140 	.word	0x20000140

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f92b 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fe38 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f943 	bl	80012fa <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f90b 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000004 	.word	0x20000004
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	2000012c 	.word	0x2000012c

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000012c 	.word	0x2000012c

080010f0 <__NVIC_SetPriorityGrouping>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff29 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff3e 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff8e 	bl	80011e4 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff31 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e177      	b.n	8001620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8166 	bne.w	800161a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	2b02      	cmp	r3, #2
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80c0 	beq.w	800161a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_GPIO_Init+0x324>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a65      	ldr	r2, [pc, #404]	; (8001638 <HAL_GPIO_Init+0x324>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_GPIO_Init+0x324>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a61      	ldr	r2, [pc, #388]	; (800163c <HAL_GPIO_Init+0x328>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_GPIO_Init+0x32c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d037      	beq.n	8001552 <HAL_GPIO_Init+0x23e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a57      	ldr	r2, [pc, #348]	; (8001644 <HAL_GPIO_Init+0x330>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d031      	beq.n	800154e <HAL_GPIO_Init+0x23a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x334>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d02b      	beq.n	800154a <HAL_GPIO_Init+0x236>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a55      	ldr	r2, [pc, #340]	; (800164c <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x232>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a54      	ldr	r2, [pc, #336]	; (8001650 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x22e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a53      	ldr	r2, [pc, #332]	; (8001654 <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x22a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a51      	ldr	r2, [pc, #324]	; (800165c <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a50      	ldr	r2, [pc, #320]	; (8001660 <HAL_GPIO_Init+0x34c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <HAL_GPIO_Init+0x350>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x21a>
 800152a:	2309      	movs	r3, #9
 800152c:	e012      	b.n	8001554 <HAL_GPIO_Init+0x240>
 800152e:	230a      	movs	r3, #10
 8001530:	e010      	b.n	8001554 <HAL_GPIO_Init+0x240>
 8001532:	2308      	movs	r3, #8
 8001534:	e00e      	b.n	8001554 <HAL_GPIO_Init+0x240>
 8001536:	2307      	movs	r3, #7
 8001538:	e00c      	b.n	8001554 <HAL_GPIO_Init+0x240>
 800153a:	2306      	movs	r3, #6
 800153c:	e00a      	b.n	8001554 <HAL_GPIO_Init+0x240>
 800153e:	2305      	movs	r3, #5
 8001540:	e008      	b.n	8001554 <HAL_GPIO_Init+0x240>
 8001542:	2304      	movs	r3, #4
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x240>
 8001546:	2303      	movs	r3, #3
 8001548:	e004      	b.n	8001554 <HAL_GPIO_Init+0x240>
 800154a:	2302      	movs	r3, #2
 800154c:	e002      	b.n	8001554 <HAL_GPIO_Init+0x240>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x240>
 8001552:	2300      	movs	r3, #0
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f002 0203 	and.w	r2, r2, #3
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	4093      	lsls	r3, r2
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001564:	4935      	ldr	r1, [pc, #212]	; (800163c <HAL_GPIO_Init+0x328>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_GPIO_Init+0x354>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001596:	4a34      	ldr	r2, [pc, #208]	; (8001668 <HAL_GPIO_Init+0x354>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_GPIO_Init+0x354>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <HAL_GPIO_Init+0x354>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_GPIO_Init+0x354>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_GPIO_Init+0x354>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_GPIO_Init+0x354>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_GPIO_Init+0x354>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	f67f ae84 	bls.w	8001330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40013800 	.word	0x40013800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40021400 	.word	0x40021400
 8001658:	40021800 	.word	0x40021800
 800165c:	40021c00 	.word	0x40021c00
 8001660:	40022000 	.word	0x40022000
 8001664:	40022400 	.word	0x40022400
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e001      	b.n	800168e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e264      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4ba0      	ldr	r3, [pc, #640]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b9d      	ldr	r3, [pc, #628]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e23f      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b91      	ldr	r3, [pc, #580]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a8a      	ldr	r2, [pc, #552]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a87      	ldr	r2, [pc, #540]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a83      	ldr	r2, [pc, #524]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc8c 	bl	80010d8 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc88 	bl	80010d8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e204      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc78 	bl	80010d8 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fc74 	bl	80010d8 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f0      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c4      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4952      	ldr	r1, [pc, #328]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_RCC_OscConfig+0x2b0>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fc2d 	bl	80010d8 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fc29 	bl	80010d8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a5      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4940      	ldr	r1, [pc, #256]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0x2b0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc0c 	bl	80010d8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc08 	bl	80010d8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e184      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d030      	beq.n	8001950 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_OscConfig+0x2b4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fbec 	bl	80010d8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fbe8 	bl	80010d8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e164      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e015      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x2b4>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fbd5 	bl	80010d8 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fbd1 	bl	80010d8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a0 	beq.w	8001a9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10f      	bne.n	800198e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d121      	bne.n	80019de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fb97 	bl	80010d8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e011      	b.n	80019d2 <HAL_RCC_OscConfig+0x2ce>
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470000 	.word	0x42470000
 80019b8:	42470e80 	.word	0x42470e80
 80019bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff fb8a 	bl	80010d8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e106      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <HAL_RCC_OscConfig+0x4e4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
 80019e6:	4b81      	ldr	r3, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a80      	ldr	r2, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x32a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x312>
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x32a>
 8001a16:	4b75      	ldr	r3, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a74      	ldr	r2, [pc, #464]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb4f 	bl	80010d8 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fb4b 	bl	80010d8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0c5      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x33a>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb39 	bl	80010d8 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb35 	bl	80010d8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0af      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 809b 	beq.w	8001bde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d05c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d141      	bne.n	8001b40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fb09 	bl	80010d8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fb05 	bl	80010d8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e081      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	019b      	lsls	r3, r3, #6
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	3b01      	subs	r3, #1
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
 8001b0c:	4937      	ldr	r1, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fade 	bl	80010d8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff fada 	bl	80010d8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e056      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x41c>
 8001b3e:	e04e      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fac7 	bl	80010d8 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fac3 	bl	80010d8 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e03f      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x44a>
 8001b6c:	e037      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e032      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d028      	beq.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d11a      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d111      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40007000 	.word	0x40007000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470060 	.word	0x42470060

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f9f8 	bl	80010d8 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f9f4 	bl	80010d8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f958 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08003da0 	.word	0x08003da0
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80bd 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0b7      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001df6:	60bb      	str	r3, [r7, #8]
       break;
 8001df8:	e0b7      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dfc:	60bb      	str	r3, [r7, #8]
      break;
 8001dfe:	e0b4      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04d      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	ea02 0800 	and.w	r8, r2, r0
 8001e2e:	ea03 0901 	and.w	r9, r3, r1
 8001e32:	4640      	mov	r0, r8
 8001e34:	4649      	mov	r1, r9
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e44:	0142      	lsls	r2, r0, #5
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	ebb0 0008 	subs.w	r0, r0, r8
 8001e4e:	eb61 0109 	sbc.w	r1, r1, r9
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e60:	0182      	lsls	r2, r0, #6
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	eb63 0301 	sbc.w	r3, r3, r1
 8001e68:	f04f 0000 	mov.w	r0, #0
 8001e6c:	f04f 0100 	mov.w	r1, #0
 8001e70:	00d9      	lsls	r1, r3, #3
 8001e72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e76:	00d0      	lsls	r0, r2, #3
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	eb12 0208 	adds.w	r2, r2, r8
 8001e80:	eb43 0309 	adc.w	r3, r3, r9
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0259      	lsls	r1, r3, #9
 8001e8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e92:	0250      	lsls	r0, r2, #9
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f7fe f9f4 	bl	8000290 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e04a      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	ea02 0400 	and.w	r4, r2, r0
 8001eca:	ea03 0501 	and.w	r5, r3, r1
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	014b      	lsls	r3, r1, #5
 8001edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee0:	0142      	lsls	r2, r0, #5
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	1b00      	subs	r0, r0, r4
 8001ee8:	eb61 0105 	sbc.w	r1, r1, r5
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	018b      	lsls	r3, r1, #6
 8001ef6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001efa:	0182      	lsls	r2, r0, #6
 8001efc:	1a12      	subs	r2, r2, r0
 8001efe:	eb63 0301 	sbc.w	r3, r3, r1
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	00d9      	lsls	r1, r3, #3
 8001f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f10:	00d0      	lsls	r0, r2, #3
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	1912      	adds	r2, r2, r4
 8001f18:	eb45 0303 	adc.w	r3, r5, r3
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0299      	lsls	r1, r3, #10
 8001f26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f2a:	0290      	lsls	r0, r2, #10
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe f9a8 	bl	8000290 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	60bb      	str	r3, [r7, #8]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f66:	60bb      	str	r3, [r7, #8]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08003db0 	.word	0x08003db0

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffdc 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4903      	ldr	r1, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08003db0 	.word	0x08003db0

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e041      	b.n	8002082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fe76 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 fa96 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04e      	b.n	8002142 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_TIM_Base_Start_IT+0xc4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d01d      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_TIM_Base_Start_IT+0xc8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d018      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_TIM_Base_Start_IT+0xcc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_TIM_Base_Start_IT+0xd0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_TIM_Base_Start_IT+0xd4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_TIM_Base_Start_IT+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_TIM_Base_Start_IT+0xdc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d010      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212e:	e007      	b.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40010400 	.word	0x40010400
 8002164:	40014000 	.word	0x40014000
 8002168:	40001800 	.word	0x40001800

0800216c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0202 	mvn.w	r2, #2
 8002198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9b5 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9a7 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f9b8 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0204 	mvn.w	r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f98b 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f97d 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f98e 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f961 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f953 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f964 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0210 	mvn.w	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2208      	movs	r2, #8
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f937 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f929 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f93a 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f980 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fae0 	bl	80028dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8ff 	bl	8002546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b20      	cmp	r3, #32
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0220 	mvn.w	r2, #32
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 faaa 	bl	80028c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_TIM_ConfigClockSource+0x1c>
 8002394:	2302      	movs	r3, #2
 8002396:	e0b4      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x186>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d0:	d03e      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0xd4>
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	f200 8087 	bhi.w	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023de:	f000 8086 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x172>
 80023e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e6:	d87f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d01a      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xa6>
 80023ec:	2b70      	cmp	r3, #112	; 0x70
 80023ee:	d87b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d050      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x11a>
 80023f4:	2b60      	cmp	r3, #96	; 0x60
 80023f6:	d877      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d03c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0xfa>
 80023fc:	2b50      	cmp	r3, #80	; 0x50
 80023fe:	d873      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d058      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d86f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b30      	cmp	r3, #48	; 0x30
 800240a:	d064      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	2b30      	cmp	r3, #48	; 0x30
 800240e:	d86b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d060      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d867      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800241c:	2b10      	cmp	r3, #16
 800241e:	d05a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002420:	e062      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f000 f9ad 	bl	8002790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
      break;
 800244e:	e04f      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f000 f996 	bl	8002790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002472:	609a      	str	r2, [r3, #8]
      break;
 8002474:	e03c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	461a      	mov	r2, r3
 8002484:	f000 f90a 	bl	800269c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2150      	movs	r1, #80	; 0x50
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f963 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 8002494:	e02c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 f929 	bl	80026fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2160      	movs	r1, #96	; 0x60
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f953 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 80024b4:	e01c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 f8ea 	bl	800269c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f943 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 80024d4:	e00c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f000 f93a 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 80024e6:	e003      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e000      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a40      	ldr	r2, [pc, #256]	; (8002670 <TIM_Base_SetConfig+0x114>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d00f      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <TIM_Base_SetConfig+0x118>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <TIM_Base_SetConfig+0x11c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <TIM_Base_SetConfig+0x120>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <TIM_Base_SetConfig+0x124>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <TIM_Base_SetConfig+0x114>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d027      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <TIM_Base_SetConfig+0x118>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d023      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <TIM_Base_SetConfig+0x11c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2a      	ldr	r2, [pc, #168]	; (800267c <TIM_Base_SetConfig+0x120>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <TIM_Base_SetConfig+0x124>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d017      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <TIM_Base_SetConfig+0x128>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <TIM_Base_SetConfig+0x12c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <TIM_Base_SetConfig+0x130>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <TIM_Base_SetConfig+0x134>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <TIM_Base_SetConfig+0x138>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <TIM_Base_SetConfig+0x13c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <TIM_Base_SetConfig+0x114>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0xf8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <TIM_Base_SetConfig+0x124>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	40000400 	.word	0x40000400
 8002678:	40000800 	.word	0x40000800
 800267c:	40000c00 	.word	0x40000c00
 8002680:	40010400 	.word	0x40010400
 8002684:	40014000 	.word	0x40014000
 8002688:	40014400 	.word	0x40014400
 800268c:	40014800 	.word	0x40014800
 8002690:	40001800 	.word	0x40001800
 8002694:	40001c00 	.word	0x40001c00
 8002698:	40002000 	.word	0x40002000

0800269c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f023 0201 	bic.w	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 030a 	bic.w	r3, r3, #10
 80026d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b087      	sub	sp, #28
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f023 0210 	bic.w	r2, r3, #16
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	f043 0307 	orr.w	r3, r3, #7
 800277c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	021a      	lsls	r2, r3, #8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e05a      	b.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d01d      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40000c00 	.word	0x40000c00
 80028bc:	40010400 	.word	0x40010400
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40001800 	.word	0x40001800

080028c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e03f      	b.n	8002982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fa1c 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f829 	bl	800298c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002990:	b09f      	sub	sp, #124	; 0x7c
 8002992:	af00      	add	r7, sp, #0
 8002994:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	ea40 0301 	orr.w	r3, r0, r1
 80029ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	431a      	orrs	r2, r3
 80029be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029d0:	f021 010c 	bic.w	r1, r1, #12
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029da:	430b      	orrs	r3, r1
 80029dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	6999      	ldr	r1, [r3, #24]
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	ea40 0301 	orr.w	r3, r0, r1
 80029f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4bc5      	ldr	r3, [pc, #788]	; (8002d10 <UART_SetConfig+0x384>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d004      	beq.n	8002a0a <UART_SetConfig+0x7e>
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4bc3      	ldr	r3, [pc, #780]	; (8002d14 <UART_SetConfig+0x388>)
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d103      	bne.n	8002a12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a0a:	f7ff fadb 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002a0e:	6778      	str	r0, [r7, #116]	; 0x74
 8002a10:	e002      	b.n	8002a18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff fac3 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8002a16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a20:	f040 80b6 	bne.w	8002b90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a26:	461c      	mov	r4, r3
 8002a28:	f04f 0500 	mov.w	r5, #0
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	462b      	mov	r3, r5
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	6439      	str	r1, [r7, #64]	; 0x40
 8002a34:	415b      	adcs	r3, r3
 8002a36:	647b      	str	r3, [r7, #68]	; 0x44
 8002a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3c:	1912      	adds	r2, r2, r4
 8002a3e:	eb45 0303 	adc.w	r3, r5, r3
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	00d9      	lsls	r1, r3, #3
 8002a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a50:	00d0      	lsls	r0, r2, #3
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	1911      	adds	r1, r2, r4
 8002a58:	6639      	str	r1, [r7, #96]	; 0x60
 8002a5a:	416b      	adcs	r3, r5
 8002a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a78:	f7fd fc0a 	bl	8000290 <__aeabi_uldivmod>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4ba5      	ldr	r3, [pc, #660]	; (8002d18 <UART_SetConfig+0x38c>)
 8002a82:	fba3 2302 	umull	r2, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	011e      	lsls	r6, r3, #4
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	461c      	mov	r4, r3
 8002a8e:	f04f 0500 	mov.w	r5, #0
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	1891      	adds	r1, r2, r2
 8002a98:	6339      	str	r1, [r7, #48]	; 0x30
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002aa2:	1912      	adds	r2, r2, r4
 8002aa4:	eb45 0303 	adc.w	r3, r5, r3
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	00d9      	lsls	r1, r3, #3
 8002ab2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab6:	00d0      	lsls	r0, r2, #3
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	1911      	adds	r1, r2, r4
 8002abe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ac0:	416b      	adcs	r3, r5
 8002ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	1891      	adds	r1, r2, r2
 8002ad0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ad2:	415b      	adcs	r3, r3
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ada:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002ade:	f7fd fbd7 	bl	8000290 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <UART_SetConfig+0x38c>)
 8002ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	2164      	movs	r1, #100	; 0x64
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	4a87      	ldr	r2, [pc, #540]	; (8002d18 <UART_SetConfig+0x38c>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b08:	441e      	add	r6, r3
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	1894      	adds	r4, r2, r2
 8002b18:	623c      	str	r4, [r7, #32]
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b22:	1812      	adds	r2, r2, r0
 8002b24:	eb41 0303 	adc.w	r3, r1, r3
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	f04f 0500 	mov.w	r5, #0
 8002b30:	00dd      	lsls	r5, r3, #3
 8002b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b36:	00d4      	lsls	r4, r2, #3
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	1814      	adds	r4, r2, r0
 8002b3e:	653c      	str	r4, [r7, #80]	; 0x50
 8002b40:	414b      	adcs	r3, r1
 8002b42:	657b      	str	r3, [r7, #84]	; 0x54
 8002b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	1891      	adds	r1, r2, r2
 8002b50:	61b9      	str	r1, [r7, #24]
 8002b52:	415b      	adcs	r3, r3
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b5e:	f7fd fb97 	bl	8000290 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4b6c      	ldr	r3, [pc, #432]	; (8002d18 <UART_SetConfig+0x38c>)
 8002b68:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2164      	movs	r1, #100	; 0x64
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <UART_SetConfig+0x38c>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 0207 	and.w	r2, r3, #7
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4432      	add	r2, r6
 8002b8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b8e:	e0b9      	b.n	8002d04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b92:	461c      	mov	r4, r3
 8002b94:	f04f 0500 	mov.w	r5, #0
 8002b98:	4622      	mov	r2, r4
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	6139      	str	r1, [r7, #16]
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ba8:	1912      	adds	r2, r2, r4
 8002baa:	eb45 0303 	adc.w	r3, r5, r3
 8002bae:	f04f 0000 	mov.w	r0, #0
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	00d9      	lsls	r1, r3, #3
 8002bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bbc:	00d0      	lsls	r0, r2, #3
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	eb12 0804 	adds.w	r8, r2, r4
 8002bc6:	eb43 0905 	adc.w	r9, r3, r5
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002be2:	0082      	lsls	r2, r0, #2
 8002be4:	4640      	mov	r0, r8
 8002be6:	4649      	mov	r1, r9
 8002be8:	f7fd fb52 	bl	8000290 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <UART_SetConfig+0x38c>)
 8002bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	011e      	lsls	r6, r3, #4
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	1894      	adds	r4, r2, r2
 8002c08:	60bc      	str	r4, [r7, #8]
 8002c0a:	415b      	adcs	r3, r3
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c12:	1812      	adds	r2, r2, r0
 8002c14:	eb41 0303 	adc.w	r3, r1, r3
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	f04f 0500 	mov.w	r5, #0
 8002c20:	00dd      	lsls	r5, r3, #3
 8002c22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c26:	00d4      	lsls	r4, r2, #3
 8002c28:	4622      	mov	r2, r4
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	1814      	adds	r4, r2, r0
 8002c2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c30:	414b      	adcs	r3, r1
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	008b      	lsls	r3, r1, #2
 8002c48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c4c:	0082      	lsls	r2, r0, #2
 8002c4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c52:	f7fd fb1d 	bl	8000290 <__aeabi_uldivmod>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <UART_SetConfig+0x38c>)
 8002c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2164      	movs	r1, #100	; 0x64
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <UART_SetConfig+0x38c>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7a:	441e      	add	r6, r3
 8002c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	1894      	adds	r4, r2, r2
 8002c8a:	603c      	str	r4, [r7, #0]
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c94:	1812      	adds	r2, r2, r0
 8002c96:	eb41 0303 	adc.w	r3, r1, r3
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	f04f 0500 	mov.w	r5, #0
 8002ca2:	00dd      	lsls	r5, r3, #3
 8002ca4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ca8:	00d4      	lsls	r4, r2, #3
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	eb12 0a00 	adds.w	sl, r2, r0
 8002cb2:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cce:	0082      	lsls	r2, r0, #2
 8002cd0:	4650      	mov	r0, sl
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <UART_SetConfig+0x38c>)
 8002cde:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2164      	movs	r1, #100	; 0x64
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <UART_SetConfig+0x38c>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4432      	add	r2, r6
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	377c      	adds	r7, #124	; 0x7c
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <__errno>:
 8002d1c:	4b01      	ldr	r3, [pc, #4]	; (8002d24 <__errno+0x8>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000010 	.word	0x20000010

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4d0d      	ldr	r5, [pc, #52]	; (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2600      	movs	r6, #0
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4d0b      	ldr	r5, [pc, #44]	; (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	; (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 ffec 	bl	8003d18 <_init>
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2600      	movs	r6, #0
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08003e58 	.word	0x08003e58
 8002d64:	08003e58 	.word	0x08003e58
 8002d68:	08003e58 	.word	0x08003e58
 8002d6c:	08003e5c 	.word	0x08003e5c

08002d70 <memset>:
 8002d70:	4402      	add	r2, r0
 8002d72:	4603      	mov	r3, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <iprintf>:
 8002d80:	b40f      	push	{r0, r1, r2, r3}
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <iprintf+0x2c>)
 8002d84:	b513      	push	{r0, r1, r4, lr}
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	b124      	cbz	r4, 8002d94 <iprintf+0x14>
 8002d8a:	69a3      	ldr	r3, [r4, #24]
 8002d8c:	b913      	cbnz	r3, 8002d94 <iprintf+0x14>
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 fa5e 	bl	8003250 <__sinit>
 8002d94:	ab05      	add	r3, sp, #20
 8002d96:	9a04      	ldr	r2, [sp, #16]
 8002d98:	68a1      	ldr	r1, [r4, #8]
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f000 fc2f 	bl	8003600 <_vfiprintf_r>
 8002da2:	b002      	add	sp, #8
 8002da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da8:	b004      	add	sp, #16
 8002daa:	4770      	bx	lr
 8002dac:	20000010 	.word	0x20000010

08002db0 <_puts_r>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	460e      	mov	r6, r1
 8002db4:	4605      	mov	r5, r0
 8002db6:	b118      	cbz	r0, 8002dc0 <_puts_r+0x10>
 8002db8:	6983      	ldr	r3, [r0, #24]
 8002dba:	b90b      	cbnz	r3, 8002dc0 <_puts_r+0x10>
 8002dbc:	f000 fa48 	bl	8003250 <__sinit>
 8002dc0:	69ab      	ldr	r3, [r5, #24]
 8002dc2:	68ac      	ldr	r4, [r5, #8]
 8002dc4:	b913      	cbnz	r3, 8002dcc <_puts_r+0x1c>
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fa42 	bl	8003250 <__sinit>
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <_puts_r+0xd0>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	d120      	bne.n	8002e14 <_puts_r+0x64>
 8002dd2:	686c      	ldr	r4, [r5, #4]
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_puts_r+0x36>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_puts_r+0x36>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f000 fad3 	bl	800338c <__retarget_lock_acquire_recursive>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0719      	lsls	r1, r3, #28
 8002dea:	d51d      	bpl.n	8002e28 <_puts_r+0x78>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	b1db      	cbz	r3, 8002e28 <_puts_r+0x78>
 8002df0:	3e01      	subs	r6, #1
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60a3      	str	r3, [r4, #8]
 8002dfc:	bb39      	cbnz	r1, 8002e4e <_puts_r+0x9e>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da38      	bge.n	8002e74 <_puts_r+0xc4>
 8002e02:	4622      	mov	r2, r4
 8002e04:	210a      	movs	r1, #10
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f848 	bl	8002e9c <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d011      	beq.n	8002e34 <_puts_r+0x84>
 8002e10:	250a      	movs	r5, #10
 8002e12:	e011      	b.n	8002e38 <_puts_r+0x88>
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <_puts_r+0xd4>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <_puts_r+0x6e>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7da      	b.n	8002dd4 <_puts_r+0x24>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <_puts_r+0xd8>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	bf08      	it	eq
 8002e24:	68ec      	ldreq	r4, [r5, #12]
 8002e26:	e7d5      	b.n	8002dd4 <_puts_r+0x24>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 f888 	bl	8002f40 <__swsetup_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0dd      	beq.n	8002df0 <_puts_r+0x40>
 8002e34:	f04f 35ff 	mov.w	r5, #4294967295
 8002e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e3a:	07da      	lsls	r2, r3, #31
 8002e3c:	d405      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	059b      	lsls	r3, r3, #22
 8002e42:	d402      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e46:	f000 faa2 	bl	800338e <__retarget_lock_release_recursive>
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da04      	bge.n	8002e5c <_puts_r+0xac>
 8002e52:	69a2      	ldr	r2, [r4, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dc06      	bgt.n	8002e66 <_puts_r+0xb6>
 8002e58:	290a      	cmp	r1, #10
 8002e5a:	d004      	beq.n	8002e66 <_puts_r+0xb6>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	6022      	str	r2, [r4, #0]
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	e7c5      	b.n	8002df2 <_puts_r+0x42>
 8002e66:	4622      	mov	r2, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f817 	bl	8002e9c <__swbuf_r>
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d1bf      	bne.n	8002df2 <_puts_r+0x42>
 8002e72:	e7df      	b.n	8002e34 <_puts_r+0x84>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	250a      	movs	r5, #10
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	701d      	strb	r5, [r3, #0]
 8002e7e:	e7db      	b.n	8002e38 <_puts_r+0x88>
 8002e80:	08003ddc 	.word	0x08003ddc
 8002e84:	08003dfc 	.word	0x08003dfc
 8002e88:	08003dbc 	.word	0x08003dbc

08002e8c <puts>:
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <puts+0xc>)
 8002e8e:	4601      	mov	r1, r0
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f7ff bf8d 	b.w	8002db0 <_puts_r>
 8002e96:	bf00      	nop
 8002e98:	20000010 	.word	0x20000010

08002e9c <__swbuf_r>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	b118      	cbz	r0, 8002eae <__swbuf_r+0x12>
 8002ea6:	6983      	ldr	r3, [r0, #24]
 8002ea8:	b90b      	cbnz	r3, 8002eae <__swbuf_r+0x12>
 8002eaa:	f000 f9d1 	bl	8003250 <__sinit>
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <__swbuf_r+0x98>)
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	d12b      	bne.n	8002f0c <__swbuf_r+0x70>
 8002eb4:	686c      	ldr	r4, [r5, #4]
 8002eb6:	69a3      	ldr	r3, [r4, #24]
 8002eb8:	60a3      	str	r3, [r4, #8]
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	071a      	lsls	r2, r3, #28
 8002ebe:	d52f      	bpl.n	8002f20 <__swbuf_r+0x84>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	b36b      	cbz	r3, 8002f20 <__swbuf_r+0x84>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	1ac0      	subs	r0, r0, r3
 8002eca:	6963      	ldr	r3, [r4, #20]
 8002ecc:	b2f6      	uxtb	r6, r6
 8002ece:	4283      	cmp	r3, r0
 8002ed0:	4637      	mov	r7, r6
 8002ed2:	dc04      	bgt.n	8002ede <__swbuf_r+0x42>
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f926 	bl	8003128 <_fflush_r>
 8002edc:	bb30      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	6022      	str	r2, [r4, #0]
 8002eea:	701e      	strb	r6, [r3, #0]
 8002eec:	6963      	ldr	r3, [r4, #20]
 8002eee:	3001      	adds	r0, #1
 8002ef0:	4283      	cmp	r3, r0
 8002ef2:	d004      	beq.n	8002efe <__swbuf_r+0x62>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	07db      	lsls	r3, r3, #31
 8002ef8:	d506      	bpl.n	8002f08 <__swbuf_r+0x6c>
 8002efa:	2e0a      	cmp	r6, #10
 8002efc:	d104      	bne.n	8002f08 <__swbuf_r+0x6c>
 8002efe:	4621      	mov	r1, r4
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 f911 	bl	8003128 <_fflush_r>
 8002f06:	b988      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002f08:	4638      	mov	r0, r7
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <__swbuf_r+0x9c>)
 8002f0e:	429c      	cmp	r4, r3
 8002f10:	d101      	bne.n	8002f16 <__swbuf_r+0x7a>
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	e7cf      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__swbuf_r+0xa0>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	bf08      	it	eq
 8002f1c:	68ec      	ldreq	r4, [r5, #12]
 8002f1e:	e7ca      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 f80c 	bl	8002f40 <__swsetup_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d0cb      	beq.n	8002ec4 <__swbuf_r+0x28>
 8002f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8002f30:	e7ea      	b.n	8002f08 <__swbuf_r+0x6c>
 8002f32:	bf00      	nop
 8002f34:	08003ddc 	.word	0x08003ddc
 8002f38:	08003dfc 	.word	0x08003dfc
 8002f3c:	08003dbc 	.word	0x08003dbc

08002f40 <__swsetup_r>:
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <__swsetup_r+0xcc>)
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	4606      	mov	r6, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b125      	cbz	r5, 8002f56 <__swsetup_r+0x16>
 8002f4c:	69ab      	ldr	r3, [r5, #24]
 8002f4e:	b913      	cbnz	r3, 8002f56 <__swsetup_r+0x16>
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 f97d 	bl	8003250 <__sinit>
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <__swsetup_r+0xd0>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d10f      	bne.n	8002f7c <__swsetup_r+0x3c>
 8002f5c:	686c      	ldr	r4, [r5, #4]
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f64:	0719      	lsls	r1, r3, #28
 8002f66:	d42c      	bmi.n	8002fc2 <__swsetup_r+0x82>
 8002f68:	06dd      	lsls	r5, r3, #27
 8002f6a:	d411      	bmi.n	8002f90 <__swsetup_r+0x50>
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f74:	81a3      	strh	r3, [r4, #12]
 8002f76:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7a:	e03e      	b.n	8002ffa <__swsetup_r+0xba>
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <__swsetup_r+0xd4>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <__swsetup_r+0x46>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e7eb      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <__swsetup_r+0xd8>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	e7e6      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f90:	0758      	lsls	r0, r3, #29
 8002f92:	d512      	bpl.n	8002fba <__swsetup_r+0x7a>
 8002f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f96:	b141      	cbz	r1, 8002faa <__swsetup_r+0x6a>
 8002f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <__swsetup_r+0x66>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f000 fa59 	bl	8003458 <_free_r>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	b94b      	cbnz	r3, 8002fda <__swsetup_r+0x9a>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d003      	beq.n	8002fda <__swsetup_r+0x9a>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 f9ff 	bl	80033d8 <__smakebuf_r>
 8002fda:	89a0      	ldrh	r0, [r4, #12]
 8002fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe0:	f010 0301 	ands.w	r3, r0, #1
 8002fe4:	d00a      	beq.n	8002ffc <__swsetup_r+0xbc>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	425b      	negs	r3, r3
 8002fee:	61a3      	str	r3, [r4, #24]
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	b943      	cbnz	r3, 8003006 <__swsetup_r+0xc6>
 8002ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ff8:	d1ba      	bne.n	8002f70 <__swsetup_r+0x30>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	0781      	lsls	r1, r0, #30
 8002ffe:	bf58      	it	pl
 8003000:	6963      	ldrpl	r3, [r4, #20]
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	e7f4      	b.n	8002ff0 <__swsetup_r+0xb0>
 8003006:	2000      	movs	r0, #0
 8003008:	e7f7      	b.n	8002ffa <__swsetup_r+0xba>
 800300a:	bf00      	nop
 800300c:	20000010 	.word	0x20000010
 8003010:	08003ddc 	.word	0x08003ddc
 8003014:	08003dfc 	.word	0x08003dfc
 8003018:	08003dbc 	.word	0x08003dbc

0800301c <__sflush_r>:
 800301c:	898a      	ldrh	r2, [r1, #12]
 800301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	4605      	mov	r5, r0
 8003024:	0710      	lsls	r0, r2, #28
 8003026:	460c      	mov	r4, r1
 8003028:	d458      	bmi.n	80030dc <__sflush_r+0xc0>
 800302a:	684b      	ldr	r3, [r1, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	dc05      	bgt.n	800303c <__sflush_r+0x20>
 8003030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	dc02      	bgt.n	800303c <__sflush_r+0x20>
 8003036:	2000      	movs	r0, #0
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800303e:	2e00      	cmp	r6, #0
 8003040:	d0f9      	beq.n	8003036 <__sflush_r+0x1a>
 8003042:	2300      	movs	r3, #0
 8003044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003048:	682f      	ldr	r7, [r5, #0]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	d032      	beq.n	80030b4 <__sflush_r+0x98>
 800304e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	075a      	lsls	r2, r3, #29
 8003054:	d505      	bpl.n	8003062 <__sflush_r+0x46>
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	1ac0      	subs	r0, r0, r3
 800305a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800305c:	b10b      	cbz	r3, 8003062 <__sflush_r+0x46>
 800305e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	2300      	movs	r3, #0
 8003064:	4602      	mov	r2, r0
 8003066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003068:	6a21      	ldr	r1, [r4, #32]
 800306a:	4628      	mov	r0, r5
 800306c:	47b0      	blx	r6
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	d106      	bne.n	8003082 <__sflush_r+0x66>
 8003074:	6829      	ldr	r1, [r5, #0]
 8003076:	291d      	cmp	r1, #29
 8003078:	d82c      	bhi.n	80030d4 <__sflush_r+0xb8>
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <__sflush_r+0x108>)
 800307c:	40ca      	lsrs	r2, r1
 800307e:	07d6      	lsls	r6, r2, #31
 8003080:	d528      	bpl.n	80030d4 <__sflush_r+0xb8>
 8003082:	2200      	movs	r2, #0
 8003084:	6062      	str	r2, [r4, #4]
 8003086:	04d9      	lsls	r1, r3, #19
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	6022      	str	r2, [r4, #0]
 800308c:	d504      	bpl.n	8003098 <__sflush_r+0x7c>
 800308e:	1c42      	adds	r2, r0, #1
 8003090:	d101      	bne.n	8003096 <__sflush_r+0x7a>
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	b903      	cbnz	r3, 8003098 <__sflush_r+0x7c>
 8003096:	6560      	str	r0, [r4, #84]	; 0x54
 8003098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800309a:	602f      	str	r7, [r5, #0]
 800309c:	2900      	cmp	r1, #0
 800309e:	d0ca      	beq.n	8003036 <__sflush_r+0x1a>
 80030a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__sflush_r+0x92>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 f9d5 	bl	8003458 <_free_r>
 80030ae:	2000      	movs	r0, #0
 80030b0:	6360      	str	r0, [r4, #52]	; 0x34
 80030b2:	e7c1      	b.n	8003038 <__sflush_r+0x1c>
 80030b4:	6a21      	ldr	r1, [r4, #32]
 80030b6:	2301      	movs	r3, #1
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b0      	blx	r6
 80030bc:	1c41      	adds	r1, r0, #1
 80030be:	d1c7      	bne.n	8003050 <__sflush_r+0x34>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0c4      	beq.n	8003050 <__sflush_r+0x34>
 80030c6:	2b1d      	cmp	r3, #29
 80030c8:	d001      	beq.n	80030ce <__sflush_r+0xb2>
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d101      	bne.n	80030d2 <__sflush_r+0xb6>
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	e7b1      	b.n	8003036 <__sflush_r+0x1a>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	e7ad      	b.n	8003038 <__sflush_r+0x1c>
 80030dc:	690f      	ldr	r7, [r1, #16]
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d0a9      	beq.n	8003036 <__sflush_r+0x1a>
 80030e2:	0793      	lsls	r3, r2, #30
 80030e4:	680e      	ldr	r6, [r1, #0]
 80030e6:	bf08      	it	eq
 80030e8:	694b      	ldreq	r3, [r1, #20]
 80030ea:	600f      	str	r7, [r1, #0]
 80030ec:	bf18      	it	ne
 80030ee:	2300      	movne	r3, #0
 80030f0:	eba6 0807 	sub.w	r8, r6, r7
 80030f4:	608b      	str	r3, [r1, #8]
 80030f6:	f1b8 0f00 	cmp.w	r8, #0
 80030fa:	dd9c      	ble.n	8003036 <__sflush_r+0x1a>
 80030fc:	6a21      	ldr	r1, [r4, #32]
 80030fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003100:	4643      	mov	r3, r8
 8003102:	463a      	mov	r2, r7
 8003104:	4628      	mov	r0, r5
 8003106:	47b0      	blx	r6
 8003108:	2800      	cmp	r0, #0
 800310a:	dc06      	bgt.n	800311a <__sflush_r+0xfe>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	e78e      	b.n	8003038 <__sflush_r+0x1c>
 800311a:	4407      	add	r7, r0
 800311c:	eba8 0800 	sub.w	r8, r8, r0
 8003120:	e7e9      	b.n	80030f6 <__sflush_r+0xda>
 8003122:	bf00      	nop
 8003124:	20400001 	.word	0x20400001

08003128 <_fflush_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	4605      	mov	r5, r0
 800312e:	460c      	mov	r4, r1
 8003130:	b913      	cbnz	r3, 8003138 <_fflush_r+0x10>
 8003132:	2500      	movs	r5, #0
 8003134:	4628      	mov	r0, r5
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	b118      	cbz	r0, 8003142 <_fflush_r+0x1a>
 800313a:	6983      	ldr	r3, [r0, #24]
 800313c:	b90b      	cbnz	r3, 8003142 <_fflush_r+0x1a>
 800313e:	f000 f887 	bl	8003250 <__sinit>
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_fflush_r+0x6c>)
 8003144:	429c      	cmp	r4, r3
 8003146:	d11b      	bne.n	8003180 <_fflush_r+0x58>
 8003148:	686c      	ldr	r4, [r5, #4]
 800314a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <_fflush_r+0xa>
 8003152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003154:	07d0      	lsls	r0, r2, #31
 8003156:	d404      	bmi.n	8003162 <_fflush_r+0x3a>
 8003158:	0599      	lsls	r1, r3, #22
 800315a:	d402      	bmi.n	8003162 <_fflush_r+0x3a>
 800315c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315e:	f000 f915 	bl	800338c <__retarget_lock_acquire_recursive>
 8003162:	4628      	mov	r0, r5
 8003164:	4621      	mov	r1, r4
 8003166:	f7ff ff59 	bl	800301c <__sflush_r>
 800316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316c:	07da      	lsls	r2, r3, #31
 800316e:	4605      	mov	r5, r0
 8003170:	d4e0      	bmi.n	8003134 <_fflush_r+0xc>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	d4dd      	bmi.n	8003134 <_fflush_r+0xc>
 8003178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317a:	f000 f908 	bl	800338e <__retarget_lock_release_recursive>
 800317e:	e7d9      	b.n	8003134 <_fflush_r+0xc>
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <_fflush_r+0x70>)
 8003182:	429c      	cmp	r4, r3
 8003184:	d101      	bne.n	800318a <_fflush_r+0x62>
 8003186:	68ac      	ldr	r4, [r5, #8]
 8003188:	e7df      	b.n	800314a <_fflush_r+0x22>
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <_fflush_r+0x74>)
 800318c:	429c      	cmp	r4, r3
 800318e:	bf08      	it	eq
 8003190:	68ec      	ldreq	r4, [r5, #12]
 8003192:	e7da      	b.n	800314a <_fflush_r+0x22>
 8003194:	08003ddc 	.word	0x08003ddc
 8003198:	08003dfc 	.word	0x08003dfc
 800319c:	08003dbc 	.word	0x08003dbc

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	4604      	mov	r4, r0
 80031a6:	e9c0 3300 	strd	r3, r3, [r0]
 80031aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ae:	6083      	str	r3, [r0, #8]
 80031b0:	8181      	strh	r1, [r0, #12]
 80031b2:	6643      	str	r3, [r0, #100]	; 0x64
 80031b4:	81c2      	strh	r2, [r0, #14]
 80031b6:	6183      	str	r3, [r0, #24]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	; 0x5c
 80031be:	f7ff fdd7 	bl	8002d70 <memset>
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x38>)
 80031c4:	6263      	str	r3, [r4, #36]	; 0x24
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <std+0x3c>)
 80031c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <std+0x40>)
 80031cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <std+0x44>)
 80031d0:	6224      	str	r4, [r4, #32]
 80031d2:	6323      	str	r3, [r4, #48]	; 0x30
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	08003ba9 	.word	0x08003ba9
 80031dc:	08003bcb 	.word	0x08003bcb
 80031e0:	08003c03 	.word	0x08003c03
 80031e4:	08003c27 	.word	0x08003c27

080031e8 <_cleanup_r>:
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <_cleanup_r+0x8>)
 80031ea:	f000 b8af 	b.w	800334c <_fwalk_reent>
 80031ee:	bf00      	nop
 80031f0:	08003129 	.word	0x08003129

080031f4 <__sfmoreglue>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	1e4a      	subs	r2, r1, #1
 80031f8:	2568      	movs	r5, #104	; 0x68
 80031fa:	4355      	muls	r5, r2
 80031fc:	460e      	mov	r6, r1
 80031fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003202:	f000 f979 	bl	80034f8 <_malloc_r>
 8003206:	4604      	mov	r4, r0
 8003208:	b140      	cbz	r0, 800321c <__sfmoreglue+0x28>
 800320a:	2100      	movs	r1, #0
 800320c:	e9c0 1600 	strd	r1, r6, [r0]
 8003210:	300c      	adds	r0, #12
 8003212:	60a0      	str	r0, [r4, #8]
 8003214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003218:	f7ff fdaa 	bl	8002d70 <memset>
 800321c:	4620      	mov	r0, r4
 800321e:	bd70      	pop	{r4, r5, r6, pc}

08003220 <__sfp_lock_acquire>:
 8003220:	4801      	ldr	r0, [pc, #4]	; (8003228 <__sfp_lock_acquire+0x8>)
 8003222:	f000 b8b3 	b.w	800338c <__retarget_lock_acquire_recursive>
 8003226:	bf00      	nop
 8003228:	20000138 	.word	0x20000138

0800322c <__sfp_lock_release>:
 800322c:	4801      	ldr	r0, [pc, #4]	; (8003234 <__sfp_lock_release+0x8>)
 800322e:	f000 b8ae 	b.w	800338e <__retarget_lock_release_recursive>
 8003232:	bf00      	nop
 8003234:	20000138 	.word	0x20000138

08003238 <__sinit_lock_acquire>:
 8003238:	4801      	ldr	r0, [pc, #4]	; (8003240 <__sinit_lock_acquire+0x8>)
 800323a:	f000 b8a7 	b.w	800338c <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	20000133 	.word	0x20000133

08003244 <__sinit_lock_release>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__sinit_lock_release+0x8>)
 8003246:	f000 b8a2 	b.w	800338e <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	20000133 	.word	0x20000133

08003250 <__sinit>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4604      	mov	r4, r0
 8003254:	f7ff fff0 	bl	8003238 <__sinit_lock_acquire>
 8003258:	69a3      	ldr	r3, [r4, #24]
 800325a:	b11b      	cbz	r3, 8003264 <__sinit+0x14>
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	f7ff bff0 	b.w	8003244 <__sinit_lock_release>
 8003264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003268:	6523      	str	r3, [r4, #80]	; 0x50
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <__sinit+0x68>)
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <__sinit+0x6c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	62a2      	str	r2, [r4, #40]	; 0x28
 8003272:	42a3      	cmp	r3, r4
 8003274:	bf04      	itt	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	61a3      	streq	r3, [r4, #24]
 800327a:	4620      	mov	r0, r4
 800327c:	f000 f820 	bl	80032c0 <__sfp>
 8003280:	6060      	str	r0, [r4, #4]
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f81c 	bl	80032c0 <__sfp>
 8003288:	60a0      	str	r0, [r4, #8]
 800328a:	4620      	mov	r0, r4
 800328c:	f000 f818 	bl	80032c0 <__sfp>
 8003290:	2200      	movs	r2, #0
 8003292:	60e0      	str	r0, [r4, #12]
 8003294:	2104      	movs	r1, #4
 8003296:	6860      	ldr	r0, [r4, #4]
 8003298:	f7ff ff82 	bl	80031a0 <std>
 800329c:	68a0      	ldr	r0, [r4, #8]
 800329e:	2201      	movs	r2, #1
 80032a0:	2109      	movs	r1, #9
 80032a2:	f7ff ff7d 	bl	80031a0 <std>
 80032a6:	68e0      	ldr	r0, [r4, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	2112      	movs	r1, #18
 80032ac:	f7ff ff78 	bl	80031a0 <std>
 80032b0:	2301      	movs	r3, #1
 80032b2:	61a3      	str	r3, [r4, #24]
 80032b4:	e7d2      	b.n	800325c <__sinit+0xc>
 80032b6:	bf00      	nop
 80032b8:	08003db8 	.word	0x08003db8
 80032bc:	080031e9 	.word	0x080031e9

080032c0 <__sfp>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	4607      	mov	r7, r0
 80032c4:	f7ff ffac 	bl	8003220 <__sfp_lock_acquire>
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <__sfp+0x84>)
 80032ca:	681e      	ldr	r6, [r3, #0]
 80032cc:	69b3      	ldr	r3, [r6, #24]
 80032ce:	b913      	cbnz	r3, 80032d6 <__sfp+0x16>
 80032d0:	4630      	mov	r0, r6
 80032d2:	f7ff ffbd 	bl	8003250 <__sinit>
 80032d6:	3648      	adds	r6, #72	; 0x48
 80032d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032dc:	3b01      	subs	r3, #1
 80032de:	d503      	bpl.n	80032e8 <__sfp+0x28>
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	b30b      	cbz	r3, 8003328 <__sfp+0x68>
 80032e4:	6836      	ldr	r6, [r6, #0]
 80032e6:	e7f7      	b.n	80032d8 <__sfp+0x18>
 80032e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032ec:	b9d5      	cbnz	r5, 8003324 <__sfp+0x64>
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <__sfp+0x88>)
 80032f0:	60e3      	str	r3, [r4, #12]
 80032f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f6:	6665      	str	r5, [r4, #100]	; 0x64
 80032f8:	f000 f847 	bl	800338a <__retarget_lock_init_recursive>
 80032fc:	f7ff ff96 	bl	800322c <__sfp_lock_release>
 8003300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003308:	6025      	str	r5, [r4, #0]
 800330a:	61a5      	str	r5, [r4, #24]
 800330c:	2208      	movs	r2, #8
 800330e:	4629      	mov	r1, r5
 8003310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003314:	f7ff fd2c 	bl	8002d70 <memset>
 8003318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800331c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003320:	4620      	mov	r0, r4
 8003322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003324:	3468      	adds	r4, #104	; 0x68
 8003326:	e7d9      	b.n	80032dc <__sfp+0x1c>
 8003328:	2104      	movs	r1, #4
 800332a:	4638      	mov	r0, r7
 800332c:	f7ff ff62 	bl	80031f4 <__sfmoreglue>
 8003330:	4604      	mov	r4, r0
 8003332:	6030      	str	r0, [r6, #0]
 8003334:	2800      	cmp	r0, #0
 8003336:	d1d5      	bne.n	80032e4 <__sfp+0x24>
 8003338:	f7ff ff78 	bl	800322c <__sfp_lock_release>
 800333c:	230c      	movs	r3, #12
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e7ee      	b.n	8003320 <__sfp+0x60>
 8003342:	bf00      	nop
 8003344:	08003db8 	.word	0x08003db8
 8003348:	ffff0001 	.word	0xffff0001

0800334c <_fwalk_reent>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	4606      	mov	r6, r0
 8003352:	4688      	mov	r8, r1
 8003354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003358:	2700      	movs	r7, #0
 800335a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800335e:	f1b9 0901 	subs.w	r9, r9, #1
 8003362:	d505      	bpl.n	8003370 <_fwalk_reent+0x24>
 8003364:	6824      	ldr	r4, [r4, #0]
 8003366:	2c00      	cmp	r4, #0
 8003368:	d1f7      	bne.n	800335a <_fwalk_reent+0xe>
 800336a:	4638      	mov	r0, r7
 800336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003370:	89ab      	ldrh	r3, [r5, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d907      	bls.n	8003386 <_fwalk_reent+0x3a>
 8003376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337a:	3301      	adds	r3, #1
 800337c:	d003      	beq.n	8003386 <_fwalk_reent+0x3a>
 800337e:	4629      	mov	r1, r5
 8003380:	4630      	mov	r0, r6
 8003382:	47c0      	blx	r8
 8003384:	4307      	orrs	r7, r0
 8003386:	3568      	adds	r5, #104	; 0x68
 8003388:	e7e9      	b.n	800335e <_fwalk_reent+0x12>

0800338a <__retarget_lock_init_recursive>:
 800338a:	4770      	bx	lr

0800338c <__retarget_lock_acquire_recursive>:
 800338c:	4770      	bx	lr

0800338e <__retarget_lock_release_recursive>:
 800338e:	4770      	bx	lr

08003390 <__swhatbuf_r>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	460e      	mov	r6, r1
 8003394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003398:	2900      	cmp	r1, #0
 800339a:	b096      	sub	sp, #88	; 0x58
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	da07      	bge.n	80033b2 <__swhatbuf_r+0x22>
 80033a2:	2300      	movs	r3, #0
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	89b3      	ldrh	r3, [r6, #12]
 80033a8:	061a      	lsls	r2, r3, #24
 80033aa:	d410      	bmi.n	80033ce <__swhatbuf_r+0x3e>
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	e00e      	b.n	80033d0 <__swhatbuf_r+0x40>
 80033b2:	466a      	mov	r2, sp
 80033b4:	f000 fc5e 	bl	8003c74 <_fstat_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	dbf2      	blt.n	80033a2 <__swhatbuf_r+0x12>
 80033bc:	9a01      	ldr	r2, [sp, #4]
 80033be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033c6:	425a      	negs	r2, r3
 80033c8:	415a      	adcs	r2, r3
 80033ca:	602a      	str	r2, [r5, #0]
 80033cc:	e7ee      	b.n	80033ac <__swhatbuf_r+0x1c>
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	2000      	movs	r0, #0
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	b016      	add	sp, #88	; 0x58
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <__smakebuf_r>:
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033dc:	079d      	lsls	r5, r3, #30
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	d507      	bpl.n	80033f4 <__smakebuf_r+0x1c>
 80033e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	6123      	str	r3, [r4, #16]
 80033ec:	2301      	movs	r3, #1
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	b002      	add	sp, #8
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	ab01      	add	r3, sp, #4
 80033f6:	466a      	mov	r2, sp
 80033f8:	f7ff ffca 	bl	8003390 <__swhatbuf_r>
 80033fc:	9900      	ldr	r1, [sp, #0]
 80033fe:	4605      	mov	r5, r0
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f879 	bl	80034f8 <_malloc_r>
 8003406:	b948      	cbnz	r0, 800341c <__smakebuf_r+0x44>
 8003408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340c:	059a      	lsls	r2, r3, #22
 800340e:	d4ef      	bmi.n	80033f0 <__smakebuf_r+0x18>
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7e3      	b.n	80033e4 <__smakebuf_r+0xc>
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <__smakebuf_r+0x7c>)
 800341e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	6020      	str	r0, [r4, #0]
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	9b00      	ldr	r3, [sp, #0]
 800342c:	6163      	str	r3, [r4, #20]
 800342e:	9b01      	ldr	r3, [sp, #4]
 8003430:	6120      	str	r0, [r4, #16]
 8003432:	b15b      	cbz	r3, 800344c <__smakebuf_r+0x74>
 8003434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003438:	4630      	mov	r0, r6
 800343a:	f000 fc2d 	bl	8003c98 <_isatty_r>
 800343e:	b128      	cbz	r0, 800344c <__smakebuf_r+0x74>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	89a0      	ldrh	r0, [r4, #12]
 800344e:	4305      	orrs	r5, r0
 8003450:	81a5      	strh	r5, [r4, #12]
 8003452:	e7cd      	b.n	80033f0 <__smakebuf_r+0x18>
 8003454:	080031e9 	.word	0x080031e9

08003458 <_free_r>:
 8003458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800345a:	2900      	cmp	r1, #0
 800345c:	d048      	beq.n	80034f0 <_free_r+0x98>
 800345e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003462:	9001      	str	r0, [sp, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f1a1 0404 	sub.w	r4, r1, #4
 800346a:	bfb8      	it	lt
 800346c:	18e4      	addlt	r4, r4, r3
 800346e:	f000 fc35 	bl	8003cdc <__malloc_lock>
 8003472:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <_free_r+0x9c>)
 8003474:	9801      	ldr	r0, [sp, #4]
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	4615      	mov	r5, r2
 800347a:	b933      	cbnz	r3, 800348a <_free_r+0x32>
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	6014      	str	r4, [r2, #0]
 8003480:	b003      	add	sp, #12
 8003482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003486:	f000 bc2f 	b.w	8003ce8 <__malloc_unlock>
 800348a:	42a3      	cmp	r3, r4
 800348c:	d90b      	bls.n	80034a6 <_free_r+0x4e>
 800348e:	6821      	ldr	r1, [r4, #0]
 8003490:	1862      	adds	r2, r4, r1
 8003492:	4293      	cmp	r3, r2
 8003494:	bf04      	itt	eq
 8003496:	681a      	ldreq	r2, [r3, #0]
 8003498:	685b      	ldreq	r3, [r3, #4]
 800349a:	6063      	str	r3, [r4, #4]
 800349c:	bf04      	itt	eq
 800349e:	1852      	addeq	r2, r2, r1
 80034a0:	6022      	streq	r2, [r4, #0]
 80034a2:	602c      	str	r4, [r5, #0]
 80034a4:	e7ec      	b.n	8003480 <_free_r+0x28>
 80034a6:	461a      	mov	r2, r3
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	b10b      	cbz	r3, 80034b0 <_free_r+0x58>
 80034ac:	42a3      	cmp	r3, r4
 80034ae:	d9fa      	bls.n	80034a6 <_free_r+0x4e>
 80034b0:	6811      	ldr	r1, [r2, #0]
 80034b2:	1855      	adds	r5, r2, r1
 80034b4:	42a5      	cmp	r5, r4
 80034b6:	d10b      	bne.n	80034d0 <_free_r+0x78>
 80034b8:	6824      	ldr	r4, [r4, #0]
 80034ba:	4421      	add	r1, r4
 80034bc:	1854      	adds	r4, r2, r1
 80034be:	42a3      	cmp	r3, r4
 80034c0:	6011      	str	r1, [r2, #0]
 80034c2:	d1dd      	bne.n	8003480 <_free_r+0x28>
 80034c4:	681c      	ldr	r4, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	6053      	str	r3, [r2, #4]
 80034ca:	4421      	add	r1, r4
 80034cc:	6011      	str	r1, [r2, #0]
 80034ce:	e7d7      	b.n	8003480 <_free_r+0x28>
 80034d0:	d902      	bls.n	80034d8 <_free_r+0x80>
 80034d2:	230c      	movs	r3, #12
 80034d4:	6003      	str	r3, [r0, #0]
 80034d6:	e7d3      	b.n	8003480 <_free_r+0x28>
 80034d8:	6825      	ldr	r5, [r4, #0]
 80034da:	1961      	adds	r1, r4, r5
 80034dc:	428b      	cmp	r3, r1
 80034de:	bf04      	itt	eq
 80034e0:	6819      	ldreq	r1, [r3, #0]
 80034e2:	685b      	ldreq	r3, [r3, #4]
 80034e4:	6063      	str	r3, [r4, #4]
 80034e6:	bf04      	itt	eq
 80034e8:	1949      	addeq	r1, r1, r5
 80034ea:	6021      	streq	r1, [r4, #0]
 80034ec:	6054      	str	r4, [r2, #4]
 80034ee:	e7c7      	b.n	8003480 <_free_r+0x28>
 80034f0:	b003      	add	sp, #12
 80034f2:	bd30      	pop	{r4, r5, pc}
 80034f4:	20000098 	.word	0x20000098

080034f8 <_malloc_r>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	1ccd      	adds	r5, r1, #3
 80034fc:	f025 0503 	bic.w	r5, r5, #3
 8003500:	3508      	adds	r5, #8
 8003502:	2d0c      	cmp	r5, #12
 8003504:	bf38      	it	cc
 8003506:	250c      	movcc	r5, #12
 8003508:	2d00      	cmp	r5, #0
 800350a:	4606      	mov	r6, r0
 800350c:	db01      	blt.n	8003512 <_malloc_r+0x1a>
 800350e:	42a9      	cmp	r1, r5
 8003510:	d903      	bls.n	800351a <_malloc_r+0x22>
 8003512:	230c      	movs	r3, #12
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	2000      	movs	r0, #0
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351a:	f000 fbdf 	bl	8003cdc <__malloc_lock>
 800351e:	4921      	ldr	r1, [pc, #132]	; (80035a4 <_malloc_r+0xac>)
 8003520:	680a      	ldr	r2, [r1, #0]
 8003522:	4614      	mov	r4, r2
 8003524:	b99c      	cbnz	r4, 800354e <_malloc_r+0x56>
 8003526:	4f20      	ldr	r7, [pc, #128]	; (80035a8 <_malloc_r+0xb0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b923      	cbnz	r3, 8003536 <_malloc_r+0x3e>
 800352c:	4621      	mov	r1, r4
 800352e:	4630      	mov	r0, r6
 8003530:	f000 fb2a 	bl	8003b88 <_sbrk_r>
 8003534:	6038      	str	r0, [r7, #0]
 8003536:	4629      	mov	r1, r5
 8003538:	4630      	mov	r0, r6
 800353a:	f000 fb25 	bl	8003b88 <_sbrk_r>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	d123      	bne.n	800358a <_malloc_r+0x92>
 8003542:	230c      	movs	r3, #12
 8003544:	6033      	str	r3, [r6, #0]
 8003546:	4630      	mov	r0, r6
 8003548:	f000 fbce 	bl	8003ce8 <__malloc_unlock>
 800354c:	e7e3      	b.n	8003516 <_malloc_r+0x1e>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	1b5b      	subs	r3, r3, r5
 8003552:	d417      	bmi.n	8003584 <_malloc_r+0x8c>
 8003554:	2b0b      	cmp	r3, #11
 8003556:	d903      	bls.n	8003560 <_malloc_r+0x68>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	441c      	add	r4, r3
 800355c:	6025      	str	r5, [r4, #0]
 800355e:	e004      	b.n	800356a <_malloc_r+0x72>
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	42a2      	cmp	r2, r4
 8003564:	bf0c      	ite	eq
 8003566:	600b      	streq	r3, [r1, #0]
 8003568:	6053      	strne	r3, [r2, #4]
 800356a:	4630      	mov	r0, r6
 800356c:	f000 fbbc 	bl	8003ce8 <__malloc_unlock>
 8003570:	f104 000b 	add.w	r0, r4, #11
 8003574:	1d23      	adds	r3, r4, #4
 8003576:	f020 0007 	bic.w	r0, r0, #7
 800357a:	1ac2      	subs	r2, r0, r3
 800357c:	d0cc      	beq.n	8003518 <_malloc_r+0x20>
 800357e:	1a1b      	subs	r3, r3, r0
 8003580:	50a3      	str	r3, [r4, r2]
 8003582:	e7c9      	b.n	8003518 <_malloc_r+0x20>
 8003584:	4622      	mov	r2, r4
 8003586:	6864      	ldr	r4, [r4, #4]
 8003588:	e7cc      	b.n	8003524 <_malloc_r+0x2c>
 800358a:	1cc4      	adds	r4, r0, #3
 800358c:	f024 0403 	bic.w	r4, r4, #3
 8003590:	42a0      	cmp	r0, r4
 8003592:	d0e3      	beq.n	800355c <_malloc_r+0x64>
 8003594:	1a21      	subs	r1, r4, r0
 8003596:	4630      	mov	r0, r6
 8003598:	f000 faf6 	bl	8003b88 <_sbrk_r>
 800359c:	3001      	adds	r0, #1
 800359e:	d1dd      	bne.n	800355c <_malloc_r+0x64>
 80035a0:	e7cf      	b.n	8003542 <_malloc_r+0x4a>
 80035a2:	bf00      	nop
 80035a4:	20000098 	.word	0x20000098
 80035a8:	2000009c 	.word	0x2000009c

080035ac <__sfputc_r>:
 80035ac:	6893      	ldr	r3, [r2, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	b410      	push	{r4}
 80035b4:	6093      	str	r3, [r2, #8]
 80035b6:	da08      	bge.n	80035ca <__sfputc_r+0x1e>
 80035b8:	6994      	ldr	r4, [r2, #24]
 80035ba:	42a3      	cmp	r3, r4
 80035bc:	db01      	blt.n	80035c2 <__sfputc_r+0x16>
 80035be:	290a      	cmp	r1, #10
 80035c0:	d103      	bne.n	80035ca <__sfputc_r+0x1e>
 80035c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c6:	f7ff bc69 	b.w	8002e9c <__swbuf_r>
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	1c58      	adds	r0, r3, #1
 80035ce:	6010      	str	r0, [r2, #0]
 80035d0:	7019      	strb	r1, [r3, #0]
 80035d2:	4608      	mov	r0, r1
 80035d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d8:	4770      	bx	lr

080035da <__sfputs_r>:
 80035da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035dc:	4606      	mov	r6, r0
 80035de:	460f      	mov	r7, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	18d5      	adds	r5, r2, r3
 80035e4:	42ac      	cmp	r4, r5
 80035e6:	d101      	bne.n	80035ec <__sfputs_r+0x12>
 80035e8:	2000      	movs	r0, #0
 80035ea:	e007      	b.n	80035fc <__sfputs_r+0x22>
 80035ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f0:	463a      	mov	r2, r7
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff ffda 	bl	80035ac <__sfputc_r>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d1f3      	bne.n	80035e4 <__sfputs_r+0xa>
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003600 <_vfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	460d      	mov	r5, r1
 8003606:	b09d      	sub	sp, #116	; 0x74
 8003608:	4614      	mov	r4, r2
 800360a:	4698      	mov	r8, r3
 800360c:	4606      	mov	r6, r0
 800360e:	b118      	cbz	r0, 8003618 <_vfiprintf_r+0x18>
 8003610:	6983      	ldr	r3, [r0, #24]
 8003612:	b90b      	cbnz	r3, 8003618 <_vfiprintf_r+0x18>
 8003614:	f7ff fe1c 	bl	8003250 <__sinit>
 8003618:	4b89      	ldr	r3, [pc, #548]	; (8003840 <_vfiprintf_r+0x240>)
 800361a:	429d      	cmp	r5, r3
 800361c:	d11b      	bne.n	8003656 <_vfiprintf_r+0x56>
 800361e:	6875      	ldr	r5, [r6, #4]
 8003620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	d405      	bmi.n	8003632 <_vfiprintf_r+0x32>
 8003626:	89ab      	ldrh	r3, [r5, #12]
 8003628:	059a      	lsls	r2, r3, #22
 800362a:	d402      	bmi.n	8003632 <_vfiprintf_r+0x32>
 800362c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800362e:	f7ff fead 	bl	800338c <__retarget_lock_acquire_recursive>
 8003632:	89ab      	ldrh	r3, [r5, #12]
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	d501      	bpl.n	800363c <_vfiprintf_r+0x3c>
 8003638:	692b      	ldr	r3, [r5, #16]
 800363a:	b9eb      	cbnz	r3, 8003678 <_vfiprintf_r+0x78>
 800363c:	4629      	mov	r1, r5
 800363e:	4630      	mov	r0, r6
 8003640:	f7ff fc7e 	bl	8002f40 <__swsetup_r>
 8003644:	b1c0      	cbz	r0, 8003678 <_vfiprintf_r+0x78>
 8003646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003648:	07dc      	lsls	r4, r3, #31
 800364a:	d50e      	bpl.n	800366a <_vfiprintf_r+0x6a>
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	b01d      	add	sp, #116	; 0x74
 8003652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003656:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <_vfiprintf_r+0x244>)
 8003658:	429d      	cmp	r5, r3
 800365a:	d101      	bne.n	8003660 <_vfiprintf_r+0x60>
 800365c:	68b5      	ldr	r5, [r6, #8]
 800365e:	e7df      	b.n	8003620 <_vfiprintf_r+0x20>
 8003660:	4b79      	ldr	r3, [pc, #484]	; (8003848 <_vfiprintf_r+0x248>)
 8003662:	429d      	cmp	r5, r3
 8003664:	bf08      	it	eq
 8003666:	68f5      	ldreq	r5, [r6, #12]
 8003668:	e7da      	b.n	8003620 <_vfiprintf_r+0x20>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	0598      	lsls	r0, r3, #22
 800366e:	d4ed      	bmi.n	800364c <_vfiprintf_r+0x4c>
 8003670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003672:	f7ff fe8c 	bl	800338e <__retarget_lock_release_recursive>
 8003676:	e7e9      	b.n	800364c <_vfiprintf_r+0x4c>
 8003678:	2300      	movs	r3, #0
 800367a:	9309      	str	r3, [sp, #36]	; 0x24
 800367c:	2320      	movs	r3, #32
 800367e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003682:	f8cd 800c 	str.w	r8, [sp, #12]
 8003686:	2330      	movs	r3, #48	; 0x30
 8003688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800384c <_vfiprintf_r+0x24c>
 800368c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003690:	f04f 0901 	mov.w	r9, #1
 8003694:	4623      	mov	r3, r4
 8003696:	469a      	mov	sl, r3
 8003698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800369c:	b10a      	cbz	r2, 80036a2 <_vfiprintf_r+0xa2>
 800369e:	2a25      	cmp	r2, #37	; 0x25
 80036a0:	d1f9      	bne.n	8003696 <_vfiprintf_r+0x96>
 80036a2:	ebba 0b04 	subs.w	fp, sl, r4
 80036a6:	d00b      	beq.n	80036c0 <_vfiprintf_r+0xc0>
 80036a8:	465b      	mov	r3, fp
 80036aa:	4622      	mov	r2, r4
 80036ac:	4629      	mov	r1, r5
 80036ae:	4630      	mov	r0, r6
 80036b0:	f7ff ff93 	bl	80035da <__sfputs_r>
 80036b4:	3001      	adds	r0, #1
 80036b6:	f000 80aa 	beq.w	800380e <_vfiprintf_r+0x20e>
 80036ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036bc:	445a      	add	r2, fp
 80036be:	9209      	str	r2, [sp, #36]	; 0x24
 80036c0:	f89a 3000 	ldrb.w	r3, [sl]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a2 	beq.w	800380e <_vfiprintf_r+0x20e>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d4:	f10a 0a01 	add.w	sl, sl, #1
 80036d8:	9304      	str	r3, [sp, #16]
 80036da:	9307      	str	r3, [sp, #28]
 80036dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e0:	931a      	str	r3, [sp, #104]	; 0x68
 80036e2:	4654      	mov	r4, sl
 80036e4:	2205      	movs	r2, #5
 80036e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ea:	4858      	ldr	r0, [pc, #352]	; (800384c <_vfiprintf_r+0x24c>)
 80036ec:	f7fc fd80 	bl	80001f0 <memchr>
 80036f0:	9a04      	ldr	r2, [sp, #16]
 80036f2:	b9d8      	cbnz	r0, 800372c <_vfiprintf_r+0x12c>
 80036f4:	06d1      	lsls	r1, r2, #27
 80036f6:	bf44      	itt	mi
 80036f8:	2320      	movmi	r3, #32
 80036fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036fe:	0713      	lsls	r3, r2, #28
 8003700:	bf44      	itt	mi
 8003702:	232b      	movmi	r3, #43	; 0x2b
 8003704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003708:	f89a 3000 	ldrb.w	r3, [sl]
 800370c:	2b2a      	cmp	r3, #42	; 0x2a
 800370e:	d015      	beq.n	800373c <_vfiprintf_r+0x13c>
 8003710:	9a07      	ldr	r2, [sp, #28]
 8003712:	4654      	mov	r4, sl
 8003714:	2000      	movs	r0, #0
 8003716:	f04f 0c0a 	mov.w	ip, #10
 800371a:	4621      	mov	r1, r4
 800371c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003720:	3b30      	subs	r3, #48	; 0x30
 8003722:	2b09      	cmp	r3, #9
 8003724:	d94e      	bls.n	80037c4 <_vfiprintf_r+0x1c4>
 8003726:	b1b0      	cbz	r0, 8003756 <_vfiprintf_r+0x156>
 8003728:	9207      	str	r2, [sp, #28]
 800372a:	e014      	b.n	8003756 <_vfiprintf_r+0x156>
 800372c:	eba0 0308 	sub.w	r3, r0, r8
 8003730:	fa09 f303 	lsl.w	r3, r9, r3
 8003734:	4313      	orrs	r3, r2
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	46a2      	mov	sl, r4
 800373a:	e7d2      	b.n	80036e2 <_vfiprintf_r+0xe2>
 800373c:	9b03      	ldr	r3, [sp, #12]
 800373e:	1d19      	adds	r1, r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	9103      	str	r1, [sp, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	bfbb      	ittet	lt
 8003748:	425b      	neglt	r3, r3
 800374a:	f042 0202 	orrlt.w	r2, r2, #2
 800374e:	9307      	strge	r3, [sp, #28]
 8003750:	9307      	strlt	r3, [sp, #28]
 8003752:	bfb8      	it	lt
 8003754:	9204      	strlt	r2, [sp, #16]
 8003756:	7823      	ldrb	r3, [r4, #0]
 8003758:	2b2e      	cmp	r3, #46	; 0x2e
 800375a:	d10c      	bne.n	8003776 <_vfiprintf_r+0x176>
 800375c:	7863      	ldrb	r3, [r4, #1]
 800375e:	2b2a      	cmp	r3, #42	; 0x2a
 8003760:	d135      	bne.n	80037ce <_vfiprintf_r+0x1ce>
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	9203      	str	r2, [sp, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	bfb8      	it	lt
 800376e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003772:	3402      	adds	r4, #2
 8003774:	9305      	str	r3, [sp, #20]
 8003776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800385c <_vfiprintf_r+0x25c>
 800377a:	7821      	ldrb	r1, [r4, #0]
 800377c:	2203      	movs	r2, #3
 800377e:	4650      	mov	r0, sl
 8003780:	f7fc fd36 	bl	80001f0 <memchr>
 8003784:	b140      	cbz	r0, 8003798 <_vfiprintf_r+0x198>
 8003786:	2340      	movs	r3, #64	; 0x40
 8003788:	eba0 000a 	sub.w	r0, r0, sl
 800378c:	fa03 f000 	lsl.w	r0, r3, r0
 8003790:	9b04      	ldr	r3, [sp, #16]
 8003792:	4303      	orrs	r3, r0
 8003794:	3401      	adds	r4, #1
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	482c      	ldr	r0, [pc, #176]	; (8003850 <_vfiprintf_r+0x250>)
 800379e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a2:	2206      	movs	r2, #6
 80037a4:	f7fc fd24 	bl	80001f0 <memchr>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d03f      	beq.n	800382c <_vfiprintf_r+0x22c>
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <_vfiprintf_r+0x254>)
 80037ae:	bb1b      	cbnz	r3, 80037f8 <_vfiprintf_r+0x1f8>
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	3307      	adds	r3, #7
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	3308      	adds	r3, #8
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037be:	443b      	add	r3, r7
 80037c0:	9309      	str	r3, [sp, #36]	; 0x24
 80037c2:	e767      	b.n	8003694 <_vfiprintf_r+0x94>
 80037c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037c8:	460c      	mov	r4, r1
 80037ca:	2001      	movs	r0, #1
 80037cc:	e7a5      	b.n	800371a <_vfiprintf_r+0x11a>
 80037ce:	2300      	movs	r3, #0
 80037d0:	3401      	adds	r4, #1
 80037d2:	9305      	str	r3, [sp, #20]
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 0c0a 	mov.w	ip, #10
 80037da:	4620      	mov	r0, r4
 80037dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e0:	3a30      	subs	r2, #48	; 0x30
 80037e2:	2a09      	cmp	r2, #9
 80037e4:	d903      	bls.n	80037ee <_vfiprintf_r+0x1ee>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c5      	beq.n	8003776 <_vfiprintf_r+0x176>
 80037ea:	9105      	str	r1, [sp, #20]
 80037ec:	e7c3      	b.n	8003776 <_vfiprintf_r+0x176>
 80037ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f2:	4604      	mov	r4, r0
 80037f4:	2301      	movs	r3, #1
 80037f6:	e7f0      	b.n	80037da <_vfiprintf_r+0x1da>
 80037f8:	ab03      	add	r3, sp, #12
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <_vfiprintf_r+0x258>)
 8003800:	a904      	add	r1, sp, #16
 8003802:	4630      	mov	r0, r6
 8003804:	f3af 8000 	nop.w
 8003808:	4607      	mov	r7, r0
 800380a:	1c78      	adds	r0, r7, #1
 800380c:	d1d6      	bne.n	80037bc <_vfiprintf_r+0x1bc>
 800380e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003810:	07d9      	lsls	r1, r3, #31
 8003812:	d405      	bmi.n	8003820 <_vfiprintf_r+0x220>
 8003814:	89ab      	ldrh	r3, [r5, #12]
 8003816:	059a      	lsls	r2, r3, #22
 8003818:	d402      	bmi.n	8003820 <_vfiprintf_r+0x220>
 800381a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800381c:	f7ff fdb7 	bl	800338e <__retarget_lock_release_recursive>
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	065b      	lsls	r3, r3, #25
 8003824:	f53f af12 	bmi.w	800364c <_vfiprintf_r+0x4c>
 8003828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382a:	e711      	b.n	8003650 <_vfiprintf_r+0x50>
 800382c:	ab03      	add	r3, sp, #12
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	462a      	mov	r2, r5
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <_vfiprintf_r+0x258>)
 8003834:	a904      	add	r1, sp, #16
 8003836:	4630      	mov	r0, r6
 8003838:	f000 f880 	bl	800393c <_printf_i>
 800383c:	e7e4      	b.n	8003808 <_vfiprintf_r+0x208>
 800383e:	bf00      	nop
 8003840:	08003ddc 	.word	0x08003ddc
 8003844:	08003dfc 	.word	0x08003dfc
 8003848:	08003dbc 	.word	0x08003dbc
 800384c:	08003e1c 	.word	0x08003e1c
 8003850:	08003e26 	.word	0x08003e26
 8003854:	00000000 	.word	0x00000000
 8003858:	080035db 	.word	0x080035db
 800385c:	08003e22 	.word	0x08003e22

08003860 <_printf_common>:
 8003860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	4616      	mov	r6, r2
 8003866:	4699      	mov	r9, r3
 8003868:	688a      	ldr	r2, [r1, #8]
 800386a:	690b      	ldr	r3, [r1, #16]
 800386c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003870:	4293      	cmp	r3, r2
 8003872:	bfb8      	it	lt
 8003874:	4613      	movlt	r3, r2
 8003876:	6033      	str	r3, [r6, #0]
 8003878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800387c:	4607      	mov	r7, r0
 800387e:	460c      	mov	r4, r1
 8003880:	b10a      	cbz	r2, 8003886 <_printf_common+0x26>
 8003882:	3301      	adds	r3, #1
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	0699      	lsls	r1, r3, #26
 800388a:	bf42      	ittt	mi
 800388c:	6833      	ldrmi	r3, [r6, #0]
 800388e:	3302      	addmi	r3, #2
 8003890:	6033      	strmi	r3, [r6, #0]
 8003892:	6825      	ldr	r5, [r4, #0]
 8003894:	f015 0506 	ands.w	r5, r5, #6
 8003898:	d106      	bne.n	80038a8 <_printf_common+0x48>
 800389a:	f104 0a19 	add.w	sl, r4, #25
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	6832      	ldr	r2, [r6, #0]
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	dc26      	bgt.n	80038f6 <_printf_common+0x96>
 80038a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038ac:	1e13      	subs	r3, r2, #0
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	bf18      	it	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	0692      	lsls	r2, r2, #26
 80038b6:	d42b      	bmi.n	8003910 <_printf_common+0xb0>
 80038b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038bc:	4649      	mov	r1, r9
 80038be:	4638      	mov	r0, r7
 80038c0:	47c0      	blx	r8
 80038c2:	3001      	adds	r0, #1
 80038c4:	d01e      	beq.n	8003904 <_printf_common+0xa4>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	68e5      	ldr	r5, [r4, #12]
 80038ca:	6832      	ldr	r2, [r6, #0]
 80038cc:	f003 0306 	and.w	r3, r3, #6
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	bf08      	it	eq
 80038d4:	1aad      	subeq	r5, r5, r2
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	6922      	ldr	r2, [r4, #16]
 80038da:	bf0c      	ite	eq
 80038dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e0:	2500      	movne	r5, #0
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bfc4      	itt	gt
 80038e6:	1a9b      	subgt	r3, r3, r2
 80038e8:	18ed      	addgt	r5, r5, r3
 80038ea:	2600      	movs	r6, #0
 80038ec:	341a      	adds	r4, #26
 80038ee:	42b5      	cmp	r5, r6
 80038f0:	d11a      	bne.n	8003928 <_printf_common+0xc8>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e008      	b.n	8003908 <_printf_common+0xa8>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4652      	mov	r2, sl
 80038fa:	4649      	mov	r1, r9
 80038fc:	4638      	mov	r0, r7
 80038fe:	47c0      	blx	r8
 8003900:	3001      	adds	r0, #1
 8003902:	d103      	bne.n	800390c <_printf_common+0xac>
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	3501      	adds	r5, #1
 800390e:	e7c6      	b.n	800389e <_printf_common+0x3e>
 8003910:	18e1      	adds	r1, r4, r3
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	2030      	movs	r0, #48	; 0x30
 8003916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800391a:	4422      	add	r2, r4
 800391c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003924:	3302      	adds	r3, #2
 8003926:	e7c7      	b.n	80038b8 <_printf_common+0x58>
 8003928:	2301      	movs	r3, #1
 800392a:	4622      	mov	r2, r4
 800392c:	4649      	mov	r1, r9
 800392e:	4638      	mov	r0, r7
 8003930:	47c0      	blx	r8
 8003932:	3001      	adds	r0, #1
 8003934:	d0e6      	beq.n	8003904 <_printf_common+0xa4>
 8003936:	3601      	adds	r6, #1
 8003938:	e7d9      	b.n	80038ee <_printf_common+0x8e>
	...

0800393c <_printf_i>:
 800393c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	460c      	mov	r4, r1
 8003942:	4691      	mov	r9, r2
 8003944:	7e27      	ldrb	r7, [r4, #24]
 8003946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003948:	2f78      	cmp	r7, #120	; 0x78
 800394a:	4680      	mov	r8, r0
 800394c:	469a      	mov	sl, r3
 800394e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003952:	d807      	bhi.n	8003964 <_printf_i+0x28>
 8003954:	2f62      	cmp	r7, #98	; 0x62
 8003956:	d80a      	bhi.n	800396e <_printf_i+0x32>
 8003958:	2f00      	cmp	r7, #0
 800395a:	f000 80d8 	beq.w	8003b0e <_printf_i+0x1d2>
 800395e:	2f58      	cmp	r7, #88	; 0x58
 8003960:	f000 80a3 	beq.w	8003aaa <_printf_i+0x16e>
 8003964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800396c:	e03a      	b.n	80039e4 <_printf_i+0xa8>
 800396e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003972:	2b15      	cmp	r3, #21
 8003974:	d8f6      	bhi.n	8003964 <_printf_i+0x28>
 8003976:	a001      	add	r0, pc, #4	; (adr r0, 800397c <_printf_i+0x40>)
 8003978:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039e9 	.word	0x080039e9
 8003984:	08003965 	.word	0x08003965
 8003988:	08003965 	.word	0x08003965
 800398c:	08003965 	.word	0x08003965
 8003990:	08003965 	.word	0x08003965
 8003994:	080039e9 	.word	0x080039e9
 8003998:	08003965 	.word	0x08003965
 800399c:	08003965 	.word	0x08003965
 80039a0:	08003965 	.word	0x08003965
 80039a4:	08003965 	.word	0x08003965
 80039a8:	08003af5 	.word	0x08003af5
 80039ac:	08003a19 	.word	0x08003a19
 80039b0:	08003ad7 	.word	0x08003ad7
 80039b4:	08003965 	.word	0x08003965
 80039b8:	08003965 	.word	0x08003965
 80039bc:	08003b17 	.word	0x08003b17
 80039c0:	08003965 	.word	0x08003965
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003965 	.word	0x08003965
 80039cc:	08003965 	.word	0x08003965
 80039d0:	08003adf 	.word	0x08003adf
 80039d4:	680b      	ldr	r3, [r1, #0]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	600a      	str	r2, [r1, #0]
 80039dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0a3      	b.n	8003b30 <_printf_i+0x1f4>
 80039e8:	6825      	ldr	r5, [r4, #0]
 80039ea:	6808      	ldr	r0, [r1, #0]
 80039ec:	062e      	lsls	r6, r5, #24
 80039ee:	f100 0304 	add.w	r3, r0, #4
 80039f2:	d50a      	bpl.n	8003a0a <_printf_i+0xce>
 80039f4:	6805      	ldr	r5, [r0, #0]
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	2d00      	cmp	r5, #0
 80039fa:	da03      	bge.n	8003a04 <_printf_i+0xc8>
 80039fc:	232d      	movs	r3, #45	; 0x2d
 80039fe:	426d      	negs	r5, r5
 8003a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a04:	485e      	ldr	r0, [pc, #376]	; (8003b80 <_printf_i+0x244>)
 8003a06:	230a      	movs	r3, #10
 8003a08:	e019      	b.n	8003a3e <_printf_i+0x102>
 8003a0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a0e:	6805      	ldr	r5, [r0, #0]
 8003a10:	600b      	str	r3, [r1, #0]
 8003a12:	bf18      	it	ne
 8003a14:	b22d      	sxthne	r5, r5
 8003a16:	e7ef      	b.n	80039f8 <_printf_i+0xbc>
 8003a18:	680b      	ldr	r3, [r1, #0]
 8003a1a:	6825      	ldr	r5, [r4, #0]
 8003a1c:	1d18      	adds	r0, r3, #4
 8003a1e:	6008      	str	r0, [r1, #0]
 8003a20:	0628      	lsls	r0, r5, #24
 8003a22:	d501      	bpl.n	8003a28 <_printf_i+0xec>
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	e002      	b.n	8003a2e <_printf_i+0xf2>
 8003a28:	0669      	lsls	r1, r5, #25
 8003a2a:	d5fb      	bpl.n	8003a24 <_printf_i+0xe8>
 8003a2c:	881d      	ldrh	r5, [r3, #0]
 8003a2e:	4854      	ldr	r0, [pc, #336]	; (8003b80 <_printf_i+0x244>)
 8003a30:	2f6f      	cmp	r7, #111	; 0x6f
 8003a32:	bf0c      	ite	eq
 8003a34:	2308      	moveq	r3, #8
 8003a36:	230a      	movne	r3, #10
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a3e:	6866      	ldr	r6, [r4, #4]
 8003a40:	60a6      	str	r6, [r4, #8]
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	bfa2      	ittt	ge
 8003a46:	6821      	ldrge	r1, [r4, #0]
 8003a48:	f021 0104 	bicge.w	r1, r1, #4
 8003a4c:	6021      	strge	r1, [r4, #0]
 8003a4e:	b90d      	cbnz	r5, 8003a54 <_printf_i+0x118>
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d04d      	beq.n	8003af0 <_printf_i+0x1b4>
 8003a54:	4616      	mov	r6, r2
 8003a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a5e:	5dc7      	ldrb	r7, [r0, r7]
 8003a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a64:	462f      	mov	r7, r5
 8003a66:	42bb      	cmp	r3, r7
 8003a68:	460d      	mov	r5, r1
 8003a6a:	d9f4      	bls.n	8003a56 <_printf_i+0x11a>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d10b      	bne.n	8003a88 <_printf_i+0x14c>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	07df      	lsls	r7, r3, #31
 8003a74:	d508      	bpl.n	8003a88 <_printf_i+0x14c>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	6861      	ldr	r1, [r4, #4]
 8003a7a:	4299      	cmp	r1, r3
 8003a7c:	bfde      	ittt	le
 8003a7e:	2330      	movle	r3, #48	; 0x30
 8003a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a88:	1b92      	subs	r2, r2, r6
 8003a8a:	6122      	str	r2, [r4, #16]
 8003a8c:	f8cd a000 	str.w	sl, [sp]
 8003a90:	464b      	mov	r3, r9
 8003a92:	aa03      	add	r2, sp, #12
 8003a94:	4621      	mov	r1, r4
 8003a96:	4640      	mov	r0, r8
 8003a98:	f7ff fee2 	bl	8003860 <_printf_common>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d14c      	bne.n	8003b3a <_printf_i+0x1fe>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	b004      	add	sp, #16
 8003aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aaa:	4835      	ldr	r0, [pc, #212]	; (8003b80 <_printf_i+0x244>)
 8003aac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	680e      	ldr	r6, [r1, #0]
 8003ab4:	061f      	lsls	r7, r3, #24
 8003ab6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003aba:	600e      	str	r6, [r1, #0]
 8003abc:	d514      	bpl.n	8003ae8 <_printf_i+0x1ac>
 8003abe:	07d9      	lsls	r1, r3, #31
 8003ac0:	bf44      	itt	mi
 8003ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac6:	6023      	strmi	r3, [r4, #0]
 8003ac8:	b91d      	cbnz	r5, 8003ad2 <_printf_i+0x196>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f023 0320 	bic.w	r3, r3, #32
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	e7b0      	b.n	8003a38 <_printf_i+0xfc>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	2378      	movs	r3, #120	; 0x78
 8003ae0:	4828      	ldr	r0, [pc, #160]	; (8003b84 <_printf_i+0x248>)
 8003ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ae6:	e7e3      	b.n	8003ab0 <_printf_i+0x174>
 8003ae8:	065e      	lsls	r6, r3, #25
 8003aea:	bf48      	it	mi
 8003aec:	b2ad      	uxthmi	r5, r5
 8003aee:	e7e6      	b.n	8003abe <_printf_i+0x182>
 8003af0:	4616      	mov	r6, r2
 8003af2:	e7bb      	b.n	8003a6c <_printf_i+0x130>
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	6826      	ldr	r6, [r4, #0]
 8003af8:	6960      	ldr	r0, [r4, #20]
 8003afa:	1d1d      	adds	r5, r3, #4
 8003afc:	600d      	str	r5, [r1, #0]
 8003afe:	0635      	lsls	r5, r6, #24
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	d501      	bpl.n	8003b08 <_printf_i+0x1cc>
 8003b04:	6018      	str	r0, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <_printf_i+0x1d2>
 8003b08:	0671      	lsls	r1, r6, #25
 8003b0a:	d5fb      	bpl.n	8003b04 <_printf_i+0x1c8>
 8003b0c:	8018      	strh	r0, [r3, #0]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	4616      	mov	r6, r2
 8003b14:	e7ba      	b.n	8003a8c <_printf_i+0x150>
 8003b16:	680b      	ldr	r3, [r1, #0]
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	600a      	str	r2, [r1, #0]
 8003b1c:	681e      	ldr	r6, [r3, #0]
 8003b1e:	6862      	ldr	r2, [r4, #4]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7fc fb64 	bl	80001f0 <memchr>
 8003b28:	b108      	cbz	r0, 8003b2e <_printf_i+0x1f2>
 8003b2a:	1b80      	subs	r0, r0, r6
 8003b2c:	6060      	str	r0, [r4, #4]
 8003b2e:	6863      	ldr	r3, [r4, #4]
 8003b30:	6123      	str	r3, [r4, #16]
 8003b32:	2300      	movs	r3, #0
 8003b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b38:	e7a8      	b.n	8003a8c <_printf_i+0x150>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	4649      	mov	r1, r9
 8003b40:	4640      	mov	r0, r8
 8003b42:	47d0      	blx	sl
 8003b44:	3001      	adds	r0, #1
 8003b46:	d0ab      	beq.n	8003aa0 <_printf_i+0x164>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	079b      	lsls	r3, r3, #30
 8003b4c:	d413      	bmi.n	8003b76 <_printf_i+0x23a>
 8003b4e:	68e0      	ldr	r0, [r4, #12]
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	4298      	cmp	r0, r3
 8003b54:	bfb8      	it	lt
 8003b56:	4618      	movlt	r0, r3
 8003b58:	e7a4      	b.n	8003aa4 <_printf_i+0x168>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	4649      	mov	r1, r9
 8003b60:	4640      	mov	r0, r8
 8003b62:	47d0      	blx	sl
 8003b64:	3001      	adds	r0, #1
 8003b66:	d09b      	beq.n	8003aa0 <_printf_i+0x164>
 8003b68:	3501      	adds	r5, #1
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	9903      	ldr	r1, [sp, #12]
 8003b6e:	1a5b      	subs	r3, r3, r1
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dcf2      	bgt.n	8003b5a <_printf_i+0x21e>
 8003b74:	e7eb      	b.n	8003b4e <_printf_i+0x212>
 8003b76:	2500      	movs	r5, #0
 8003b78:	f104 0619 	add.w	r6, r4, #25
 8003b7c:	e7f5      	b.n	8003b6a <_printf_i+0x22e>
 8003b7e:	bf00      	nop
 8003b80:	08003e2d 	.word	0x08003e2d
 8003b84:	08003e3e 	.word	0x08003e3e

08003b88 <_sbrk_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4d06      	ldr	r5, [pc, #24]	; (8003ba4 <_sbrk_r+0x1c>)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	f7fd f9c8 	bl	8000f28 <_sbrk>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d102      	bne.n	8003ba2 <_sbrk_r+0x1a>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	b103      	cbz	r3, 8003ba2 <_sbrk_r+0x1a>
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	2000013c 	.word	0x2000013c

08003ba8 <__sread>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	460c      	mov	r4, r1
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	f000 f8a0 	bl	8003cf4 <_read_r>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	bfab      	itete	ge
 8003bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bba:	89a3      	ldrhlt	r3, [r4, #12]
 8003bbc:	181b      	addge	r3, r3, r0
 8003bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bc2:	bfac      	ite	ge
 8003bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bc6:	81a3      	strhlt	r3, [r4, #12]
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <__swrite>:
 8003bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	461f      	mov	r7, r3
 8003bd0:	898b      	ldrh	r3, [r1, #12]
 8003bd2:	05db      	lsls	r3, r3, #23
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	4616      	mov	r6, r2
 8003bda:	d505      	bpl.n	8003be8 <__swrite+0x1e>
 8003bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be0:	2302      	movs	r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	f000 f868 	bl	8003cb8 <_lseek_r>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfe:	f000 b817 	b.w	8003c30 <_write_r>

08003c02 <__sseek>:
 8003c02:	b510      	push	{r4, lr}
 8003c04:	460c      	mov	r4, r1
 8003c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0a:	f000 f855 	bl	8003cb8 <_lseek_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	bf15      	itete	ne
 8003c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c1e:	81a3      	strheq	r3, [r4, #12]
 8003c20:	bf18      	it	ne
 8003c22:	81a3      	strhne	r3, [r4, #12]
 8003c24:	bd10      	pop	{r4, pc}

08003c26 <__sclose>:
 8003c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2a:	f000 b813 	b.w	8003c54 <_close_r>
	...

08003c30 <_write_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d07      	ldr	r5, [pc, #28]	; (8003c50 <_write_r+0x20>)
 8003c34:	4604      	mov	r4, r0
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	602a      	str	r2, [r5, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fd f921 	bl	8000e86 <_write>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_write_r+0x1e>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_write_r+0x1e>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	2000013c 	.word	0x2000013c

08003c54 <_close_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d06      	ldr	r5, [pc, #24]	; (8003c70 <_close_r+0x1c>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	f7fd f92d 	bl	8000ebe <_close>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_close_r+0x1a>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_close_r+0x1a>
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	2000013c 	.word	0x2000013c

08003c74 <_fstat_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4d07      	ldr	r5, [pc, #28]	; (8003c94 <_fstat_r+0x20>)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	602b      	str	r3, [r5, #0]
 8003c82:	f7fd f928 	bl	8000ed6 <_fstat>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d102      	bne.n	8003c90 <_fstat_r+0x1c>
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	b103      	cbz	r3, 8003c90 <_fstat_r+0x1c>
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
 8003c92:	bf00      	nop
 8003c94:	2000013c 	.word	0x2000013c

08003c98 <_isatty_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4d06      	ldr	r5, [pc, #24]	; (8003cb4 <_isatty_r+0x1c>)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	602b      	str	r3, [r5, #0]
 8003ca4:	f7fd f927 	bl	8000ef6 <_isatty>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_isatty_r+0x1a>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_isatty_r+0x1a>
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	2000013c 	.word	0x2000013c

08003cb8 <_lseek_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	; (8003cd8 <_lseek_r+0x20>)
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	602a      	str	r2, [r5, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f7fd f920 	bl	8000f0c <_lseek>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_lseek_r+0x1e>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_lseek_r+0x1e>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	2000013c 	.word	0x2000013c

08003cdc <__malloc_lock>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__malloc_lock+0x8>)
 8003cde:	f7ff bb55 	b.w	800338c <__retarget_lock_acquire_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	20000134 	.word	0x20000134

08003ce8 <__malloc_unlock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__malloc_unlock+0x8>)
 8003cea:	f7ff bb50 	b.w	800338e <__retarget_lock_release_recursive>
 8003cee:	bf00      	nop
 8003cf0:	20000134 	.word	0x20000134

08003cf4 <_read_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d07      	ldr	r5, [pc, #28]	; (8003d14 <_read_r+0x20>)
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	602a      	str	r2, [r5, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7fd f8a2 	bl	8000e4c <_read>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_read_r+0x1e>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_read_r+0x1e>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	2000013c 	.word	0x2000013c

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
